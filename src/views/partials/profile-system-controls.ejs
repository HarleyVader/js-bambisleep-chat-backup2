<% 
// Default values if profile is not provided
const userLevel = profile ? profile.level || 0 : 0;
const userXp = profile ? profile.xp || 0 : 0;

// Define XP requirements for each level - must match backend
const xpRequirements = [1000, 2500, 4500, 7000, 12000, 36000, 112000, 332000];

// Calculate next level XP requirement
const getNextLevelXP = (level, currentXP) => {
  if (level >= xpRequirements.length) return null;
  
  let totalXpForLevel = 0;
  for (let i = 0; i <= level; i++) {
    totalXpForLevel += xpRequirements[i] || 0;
  }
  return totalXpForLevel;
};

const nextLevelXP = getNextLevelXP(userLevel, userXp);
const systemControls = profile && profile.systemControls ? profile.systemControls : {};
%>

<div class="system-controls">
  <!-- Control buttons section -->
  <div id="buttons" class="control-buttons">
    <!-- Show triggers button only if level â‰¥ 1 -->
    <% if (userLevel >= 1) { %>
      <button id="triggers-btn" class="control-btn active" data-target="trigger-panel">Triggers</button>
    <% } else { %>
      <button class="control-btn disabled" title="Reach Level 1 to unlock">Triggers ðŸ”’</button>
    <% } %>
    
    <!-- Show collar feature if user level â‰¥ 2 -->
    <% if (userLevel >= 2) { %>
      <button id="collar-btn" class="control-btn" data-target="collar-panel">Collar</button>
    <% } else { %>
      <button class="control-btn disabled" title="Reach Level 2 to unlock">Collar ðŸ”’</button>
    <% } %>
    
    <!-- Show spirals feature if user level â‰¥ 3 -->
    <% if (userLevel >= 3) { %>
      <button id="spirals-btn" class="control-btn" data-target="spirals-panel">Spirals</button>
    <% } else { %>
      <button class="control-btn disabled" title="Reach Level 3 to unlock">Spirals ðŸ”’</button>
    <% } %>
    
    <!-- Show audios feature if user level â‰¥ 4 -->
    <% if (userLevel >= 4) { %>
      <button id="audios-btn" class="control-btn" data-target="audios-panel">Audios</button>
    <% } else { %>
      <button class="control-btn disabled" title="Reach Level 4 to unlock">Audios ðŸ”’</button>
    <% } %>

    <!-- Show brainwave feature if user level â‰¥ 5 -->
    <% if (userLevel >= 5) { %>
      <button id="brainwave-btn" class="control-btn" data-target="brainwave-panel">Brainwaves</button>
    <% } else { %>
      <button class="control-btn disabled" title="Reach Level 5 to unlock">Brainwaves ðŸ”’</button>
    <% } %>
    
    <!-- Show advanced binaural feature if user level â‰¥ 6 -->
    <% if (userLevel >= 6) { %>
      <button id="advanced-binaural-btn" class="control-btn" data-target="advanced-binaural-panel">Advanced Binaural</button>
    <% } else { %>
      <button class="control-btn disabled" title="Reach Level 6 to unlock">Advanced Binaural ðŸ”’</button>
    <% } %>
    
    <!-- Live Stats button - always available -->
    <% if (userXp !== undefined) { %>
      <button id="stats-btn" class="control-btn" data-target="stats-panel">ðŸ“Š Live Stats</button>
    <% } %>
  </div>

  <!-- Control panels section -->
  <div id="console" class="control-panels">
    <% if (userLevel >= 1) { %>
      <!-- Trigger panel -->
      <div id="trigger-panel" class="control-panel active">
        <h3>Trigger Toggles</h3>
        <div class="trigger-actions">
          <button id="activate-all" class="secondary-btn">Toggle All</button>
          <button id="play-triggers" class="btn btn-accent">
            <i class="fas fa-play"></i> Play Triggers
          </button>
        </div>
        <div id="trigger-list" class="trigger-grid"></div>
      </div>
      
      <% if (userLevel >= 2) { %>
        <!-- Collar panel -->
        <div id="collar-panel" class="control-panel">
          <h3>Collar Control</h3>
          <div id="collar-form-inputs">
            <div class="collar-toggle">
              <input type="checkbox" id="collar-enable" <%= systemControls.collarEnabled ? 'checked' : '' %>>
              <label for="collar-enable">Enable Collar</label>
            </div>
            <textarea id="textarea-collar" placeholder="Enter collar instructions..."><%= systemControls.collarText || '' %></textarea>
            <button id="save-collar" class="save-btn">Save Collar Settings</button>
          </div>
          <div class="collar-messages"></div>
        </div>
      <% } %>
      
      <% if (userLevel >= 3) { %>
        <!-- Spirals panel -->
        <div id="spirals-panel" class="control-panel">
          <h3>Spirals Settings</h3>
          <div class="spirals-toggle">
            <input type="checkbox" id="spirals-enable" <%= systemControls.spiralsEnabled ? 'checked' : '' %>>
            <label for="spirals-enable">Enable Spirals</label>
          </div>
          
          <div class="spirals-controls">
            <div class="spiral-control-group">
              <label>Purple Spiral Width:</label>
              <div class="slider-container">
                <input type="range" id="spiral1-width" min="1" max="10" value="<%= systemControls.spiral1Width || 5.0 %>" step="0.5" class="spiral-slider">
                <span id="spiral1-width-value"><%= systemControls.spiral1Width || 5.0 %></span>
              </div>
            </div>
            
            <div class="spiral-control-group">
              <label>Pink Spiral Width:</label>
              <div class="slider-container">
                <input type="range" id="spiral2-width" min="1" max="10" value="<%= systemControls.spiral2Width || 3.0 %>" step="0.5" class="spiral-slider">
                <span id="spiral2-width-value"><%= systemControls.spiral2Width || 3.0 %></span>
              </div>
            </div>
            
            <div class="spiral-control-group">
              <label>Purple Spiral Speed:</label>
              <div class="slider-container">
                <input type="range" id="spiral1-speed" min="5" max="40" value="<%= systemControls.spiral1Speed || 20 %>" step="1" class="spiral-slider">
                <span id="spiral1-speed-value"><%= systemControls.spiral1Speed || 20 %></span>
              </div>
            </div>
            
            <div class="spiral-control-group">
              <label>Pink Spiral Speed:</label>
              <div class="slider-container">
                <input type="range" id="spiral2-speed" min="5" max="40" value="<%= systemControls.spiral2Speed || 15 %>" step="1" class="spiral-slider">
                <span id="spiral2-speed-value"><%= systemControls.spiral2Speed || 15 %></span>
              </div>
            </div>
          </div>
          
          <div class="spirals-actions">
            <button id="save-spirals" class="save-btn">Save Spiral Settings</button>
          </div>
        </div>
      <% } %>
      
      <% if (userLevel >= 4) { %>
        <!-- Audio panel -->
        <div id="audios-panel" class="control-panel">
          <h3>Trigger Audios</h3>
          <div class="playlist-actions">
            <button id="play-playlist" class="secondary-btn">Play Random Playlist</button>
            <div class="trigger-toggle-item">
              <input type="checkbox" id="loop-toggle" class="toggle-input">
              <label for="loop-toggle" class="toggle-label">Continuous Loop</label>
            </div>
          </div>
          
          <div class="audio-controls">
            <div class="audio-speed-control">
              <label for="loop-speed">Speed:</label>
              <input type="range" id="loop-speed" min="1" max="10" value="5" class="speed-slider">
              <span id="speed-value">Normal</span>
            </div>
            
            <div class="audio-volume-control">
              <label for="loop-volume">Volume:</label>
              <input type="range" id="loop-volume" min="0" max="10" value="8" class="volume-slider">
              <span id="volume-value">80%</span>
            </div>
          </div>
        </div>
      <% } %>

      <% if (userLevel >= 5) { %>
        <!-- Brainwave panel -->
        <div id="brainwave-panel" class="control-panel">
          <h3>Brainwave Entrainment</h3>
          <div class="brainwave-toggle">
            <input type="checkbox" id="brainwave-enable" <%= systemControls.brainwaveEnabled ? 'checked' : '' %>>
            <label for="brainwave-enable">Enable Binaural Beats</label>
          </div>
          
          <div class="brainwave-controls">
            <div class="brainwave-control-group">
              <label for="brainwave-mode">Frequency Mode:</label>
              <select id="brainwave-mode" class="brainwave-select">
                <option value="alpha" <%= (systemControls.brainwaveMode === 'alpha') ? 'selected' : '' %>>Alpha (10Hz) - Relaxed Focus</option>
                <option value="theta" <%= (systemControls.brainwaveMode === 'theta') ? 'selected' : '' %>>Theta (6Hz) - Deep Trance</option>
                <option value="delta" <%= (systemControls.brainwaveMode === 'delta') ? 'selected' : '' %>>Delta (2Hz) - Sleep State</option>
                <option value="beta" <%= (systemControls.brainwaveMode === 'beta') ? 'selected' : '' %>>Beta (20Hz) - Alert State</option>
                <option value="custom" <%= (systemControls.brainwaveMode === 'custom') ? 'selected' : '' %>>Custom Frequency</option>
              </select>
            </div>
            
            <div id="frequency-description" class="frequency-description">
              Alpha waves (8-14Hz) promote relaxed focus and are ideal for gentle trance states.
            </div>
            
            <div id="custom-freq-container" class="brainwave-control-group" style="<%= (systemControls.brainwaveMode === 'custom') ? '' : 'display: none;' %>">
              <label for="custom-frequency">Beat Frequency:</label>
              <div class="slider-container">
                <input type="range" id="custom-frequency" min="1" max="30" value="<%= systemControls.customFrequency || 10 %>" step="0.5" class="brainwave-slider">
                <span id="custom-frequency-value"><%= systemControls.customFrequency || 10 %> Hz</span>
              </div>
            </div>
            
            <div class="brainwave-control-group">
              <label for="carrier-frequency">Carrier Frequency:</label>
              <div class="slider-container">
                <input type="range" id="carrier-frequency" min="100" max="500" value="<%= systemControls.carrierFrequency || 200 %>" step="10" class="brainwave-slider">
                <span id="carrier-frequency-value"><%= systemControls.carrierFrequency || 200 %> Hz</span>
              </div>
            </div>
            
            <div class="brainwave-control-group">
              <label for="brainwave-volume">Volume:</label>
              <div class="slider-container">
                <input type="range" id="brainwave-volume" min="0" max="100" value="<%= systemControls.brainwaveVolume || 50 %>" step="1" class="brainwave-slider">
                <span id="brainwave-volume-value"><%= systemControls.brainwaveVolume || 50 %>%</span>
              </div>
            </div>
          </div>
          
          <div class="brainwave-actions">
            <button id="play-brainwave" class="secondary-btn">Play Binaural Beat</button>
            <button id="stop-brainwave" class="secondary-btn" disabled>Stop</button>
            <button id="save-brainwave" class="save-btn">Save Settings</button>
          </div>
        </div>
      <% } %>
        <% if (userLevel >= 6) { %>
        <!-- Advanced Binaural panel -->
        <div id="advanced-binaural-panel" class="control-panel">
          <h3>Advanced Binaural Patterns</h3>
          <div class="advanced-binaural-info">
            <p>This advanced feature allows more complex brainwave entrainment patterns that change over time.</p>
            <div class="science-reference">
              <i class="fas fa-flask"></i> Based on recent neuroscience research on frequency-following response.
              <a href="#" id="science-link" class="info-link">Learn more</a>
            </div>
          </div>
          
          <div class="binaural-toggle">
            <input type="checkbox" id="advanced-binaural-enable" <%= systemControls.advancedBinauralEnabled ? 'checked' : '' %>>
            <label for="advanced-binaural-enable">Enable Advanced Patterns</label>
          </div>
          
          <div class="binaural-controls">
            <div class="binaural-control-group">
              <label for="pattern-select">Pattern Type:</label>
              <select id="pattern-select" class="binaural-select">
                <option value="descent" <%= (systemControls.binauralPattern === 'descent') ? 'selected' : '' %>>Descent (Alpha to Theta to Delta)</option>
                <option value="ascent" <%= (systemControls.binauralPattern === 'ascent') ? 'selected' : '' %>>Ascent (Delta to Theta to Alpha)</option>
                <option value="focus" <%= (systemControls.binauralPattern === 'focus') ? 'selected' : '' %>>Focus Cycle (Alpha-Beta-Alpha)</option>
                <option value="trance" <%= (systemControls.binauralPattern === 'trance') ? 'selected' : '' %>>Deep Trance (Alpha-Theta Loop)</option>
                <option value="custom" <%= (systemControls.binauralPattern === 'custom') ? 'selected' : '' %>>Custom Pattern</option>
              </select>
            </div>
            
            <div id="pattern-description" class="pattern-description">
              Descent pattern gradually moves from alert Alpha waves down through Theta into deep Delta, creating a natural descent into trance.
            </div>
            
            <div id="custom-pattern-container" class="binaural-control-group" style="<%= (systemControls.binauralPattern === 'custom') ? '' : 'display: none;' %>">
              <label>Custom Pattern Sequence:</label>
              <div class="pattern-segments">
                <!-- Custom segments added by JS -->
              </div>
              <button id="add-segment" class="secondary-btn">Add Segment</button>
            </div>
            
            <div class="binaural-control-group">
              <label for="pattern-duration">Pattern Duration:</label>
              <div class="slider-container">
                <input type="range" id="pattern-duration" min="5" max="60" value="<%= systemControls.patternDuration || 20 %>" step="5" class="binaural-slider">
                <span id="pattern-duration-value"><%= systemControls.patternDuration || 20 %> minutes</span>
              </div>
            </div>
            
            <div class="binaural-control-group">
              <label for="transition-time">Transition Time:</label>
              <div class="slider-container">
                <input type="range" id="transition-time" min="10" max="120" value="<%= systemControls.transitionTime || 30 %>" step="10" class="binaural-slider">
                <span id="transition-time-value"><%= systemControls.transitionTime || 30 %> seconds</span>
              </div>
            </div>
            
            <div class="binaural-control-group">
              <label for="advanced-binaural-volume">Volume:</label>
              <div class="slider-container">
                <input type="range" id="advanced-binaural-volume" min="0" max="100" value="<%= systemControls.advancedBinauralVolume || 50 %>" step="5" class="binaural-slider">
                <span id="advanced-binaural-volume-value"><%= systemControls.advancedBinauralVolume || 50 %>%</span>
              </div>
            </div>
            
            <div class="binaural-control-group">
              <label for="carrier-frequency-advanced">Carrier Frequency:</label>
              <div class="slider-container">
                <input type="range" id="carrier-frequency-advanced" min="100" max="800" value="<%= systemControls.carrierFrequencyAdvanced || 200 %>" step="50" class="binaural-slider">
                <span id="carrier-frequency-advanced-value"><%= systemControls.carrierFrequencyAdvanced || 200 %> Hz</span>
              </div>
            </div>
            
            <div class="binaural-visualization">
              <canvas id="pattern-visualization" width="400" height="200"></canvas>
            </div>
          </div>
          
          <div class="binaural-actions">
            <button id="play-advanced-binaural" class="secondary-btn">Play Pattern</button>
            <button id="stop-advanced-binaural" class="secondary-btn" disabled>Stop</button>
            <button id="save-advanced-binaural" class="save-btn">Save Settings</button>
          </div>
        </div>
        <% } %>

    <% } else { %>
      <div class="locked-features-message">
        <p>ðŸ”’ Reach Level 1 to unlock trigger controls!</p>
        <p>Keep chatting with Bambi to earn XP and level up.</p>
      </div>
    <% } %>
    
    <!-- Live Stats Panel - Always available if user has XP data -->
    <% if (userXp !== undefined) { %>
      <div id="stats-panel" class="control-panel">
        <h3>ðŸ“Š Live Statistics</h3>
        
        <div class="stats-section">
          <div class="stats-section-title">Current Session</div>
          <div class="stats-grid">
            <div class="stats-item">
              <div class="stats-value session-time" id="session-duration">00:00</div>
              <div class="stats-label">Session Time</div>
            </div>
            <div class="stats-item">
              <div class="stats-value" id="session-xp">0</div>
              <div class="stats-label">XP Earned</div>
            </div>
            <div class="stats-item">
              <div class="stats-value xp-rate" id="xp-per-hour">0</div>
              <div class="stats-label">XP/Hour</div>
            </div>
            <div class="stats-item">
              <div class="stats-value" id="user-rank">#-</div>
              <div class="stats-label">Your Rank</div>
            </div>
          </div>
        </div>
        
        <div class="stats-section">
          <div class="stats-section-title">Activity</div>
          <div class="stats-grid">
            <div class="stats-item">
              <div class="stats-value" id="messages-count">0</div>
              <div class="stats-label">Messages</div>
            </div>
            <div class="stats-item">
              <div class="stats-value" id="triggers-count">0</div>
              <div class="stats-label">Triggers</div>
            </div>
            <div class="stats-item">
              <div class="stats-value" id="audio-count">0</div>
              <div class="stats-label">Audio</div>
            </div>
            <div class="stats-item">
              <div class="stats-value" id="next-level-xp">0</div>
              <div class="stats-label">XP to Next</div>
            </div>
          </div>
        </div>
        
        <div class="stats-actions">
          <button id="refresh-stats" class="secondary-btn">ðŸ”„ Refresh</button>
          <button id="reset-session" class="secondary-btn">ðŸ”„ Reset Session</button>
        </div>
      </div>
    <% } %>
  </div>
  <!-- XP progress bar -->
  <% if (userXp !== undefined) { %>
    <div class="xp-progress-container">
      <div class="xp-progress-label" id="xp-progress-label">
        <% if (userLevel < xpRequirements.length && nextLevelXP) { %>
          Level <%= userLevel %> â€¢ <%= userXp %> XP / <%= nextLevelXP %> XP
        <% } else { %>
          Level <%= userLevel %> â€¢ <%= userXp %> XP (MAX LEVEL)
        <% } %>
      </div>
      <div class="xp-progress-bar">
        <% if (userLevel < xpRequirements.length && nextLevelXP) { %>
          <div class="xp-progress-fill" id="xp-progress-fill" style="width: <%= Math.min(100, (userXp / Math.max(1, nextLevelXP)) * 100) %>%;"></div>
        <% } else { %>
          <div class="xp-progress-fill" id="xp-progress-fill" style="width: 100%;"></div>
        <% } %>
      </div>
    </div>
  <% } %>
</div>



<script>
  document.addEventListener("DOMContentLoaded", function() {
    window.xpRequirements = [1000, 2500, 4500, 7000, 12000, 36000, 112000, 332000];
    
    // Initialize realtime stats tracking
    let realtimeStatsEnabled = false;
    let statsUpdateInterval = null;
    let sessionStartTime = Date.now();
    let currentUsername = document.body.getAttribute('data-username') || '<%= profile?.username || "anonBambi" %>';
    
    // Stats panel management functions
    function startStatsUpdates() {
      if (statsUpdateInterval) clearInterval(statsUpdateInterval);
      
      // Update stats every 2 seconds
      statsUpdateInterval = setInterval(updateRealtimeStats, 2000);
      updateRealtimeStats(); // Initial update
      realtimeStatsEnabled = true;
    }
    
    function stopStatsUpdates() {
      if (statsUpdateInterval) {
        clearInterval(statsUpdateInterval);
        statsUpdateInterval = null;
      }
      realtimeStatsEnabled = false;
    }
    
    async function updateRealtimeStats() {
      if (!realtimeStatsEnabled || currentUsername === 'anonBambi') return;
      
      try {
        const response = await fetch(`/api/stats/realtime/${currentUsername}`);
        if (response.ok) {
          const stats = await response.json();
          updateStatsDisplay(stats);
        }
      } catch (error) {
        console.warn('Failed to fetch realtime stats:', error);
      }
    }
    
    function updateStatsDisplay(stats) {
      // Update session duration
      const sessionDuration = document.getElementById('session-duration');
      if (sessionDuration && stats.currentSession) {
        const duration = stats.currentSession.duration || (Date.now() - sessionStartTime);
        sessionDuration.textContent = formatDuration(duration);
      }
      
      // Update session XP
      const sessionXP = document.getElementById('session-xp');
      if (sessionXP && stats.currentSession) {
        const newValue = stats.currentSession.xpEarned || 0;
        if (sessionXP.textContent !== newValue.toString()) {
          sessionXP.textContent = newValue;
          sessionXP.classList.add('pulse');
          setTimeout(() => sessionXP.classList.remove('pulse'), 600);
        }
      }
      
      // Update XP/hour rate
      const xpPerHour = document.getElementById('xp-per-hour');
      if (xpPerHour && stats.currentSession) {
        const rate = Math.round(stats.currentSession.xpPerHour || 0);
        xpPerHour.textContent = rate;
        xpPerHour.className = 'stats-value xp-rate';
        if (rate < 100) xpPerHour.classList.add('declining');
      }
      
      // Update user rank
      const userRank = document.getElementById('user-rank');
      if (userRank && stats.rank) {
        userRank.textContent = `#${stats.rank}`;
      }
      
      // Update activity counters
      if (stats.currentSession && stats.currentSession.activities) {
        const activities = stats.currentSession.activities;
        
        const messagesCount = document.getElementById('messages-count');
        if (messagesCount) messagesCount.textContent = activities.messages || 0;
        
        const triggersCount = document.getElementById('triggers-count');
        if (triggersCount) triggersCount.textContent = activities.triggers || 0;
        
        const audioCount = document.getElementById('audio-count');
        if (audioCount) audioCount.textContent = activities.audio || 0;
      }
      
      // Update XP to next level
      const nextLevelXP = document.getElementById('next-level-xp');
      if (nextLevelXP && stats.xpToNextLevel !== undefined) {
        nextLevelXP.textContent = stats.xpToNextLevel;
      }
    }
    
    function formatDuration(milliseconds) {
      const seconds = Math.floor(milliseconds / 1000);
      const minutes = Math.floor(seconds / 60);
      const hours = Math.floor(minutes / 60);
      
      if (hours > 0) {
        return `${hours}:${String(minutes % 60).padStart(2, '0')}:${String(seconds % 60).padStart(2, '0')}`;
      } else {
        return `${minutes}:${String(seconds % 60).padStart(2, '0')}`;
      }
    }
    
    // Socket integration for realtime updates
    if (typeof socket !== 'undefined') {
      socket.on('stats:xp:update', function(data) {
        if (data.username === currentUsername && realtimeStatsEnabled) {
          updateRealtimeStats(); // Refresh stats on XP update
        }
      });
      
      socket.on('stats:activity:update', function(data) {
        if (data.username === currentUsername && realtimeStatsEnabled) {
          updateStatsDisplay(data.sessionStats);
        }
      });
    }
    
    // Tab navigation
    const controlButtons = document.querySelectorAll('.control-btn:not(.disabled)');
    
    controlButtons.forEach(button => {
      button.addEventListener('click', function() {
        const targetId = this.getAttribute('data-target');
        if (!targetId) return;
        
        controlButtons.forEach(btn => btn.classList.remove('active'));
        document.querySelectorAll('.control-panel').forEach(panel => {
          panel.classList.remove('active');
        });
        
        this.classList.add('active');
        const targetPanel = document.getElementById(targetId);
        if (targetPanel) targetPanel.classList.add('active');
        
        // Handle stats panel activation
        if (targetId === 'stats-panel') {
          startStatsUpdates();
        } else {
          stopStatsUpdates();
        }
        
        localStorage.setItem('bambiLastTab', targetId);
      });
    });
    
    // Load last tab
    const lastTab = localStorage.getItem('bambiLastTab');
    if (lastTab) {
      const tabButton = document.querySelector(`.control-btn[data-target="${lastTab}"]`);
      if (tabButton && !tabButton.classList.contains('disabled')) {
        tabButton.click();
      } else if (controlButtons.length > 0) {
        controlButtons[0].click();
      }
    } else if (controlButtons.length > 0) {
      controlButtons[0].click();
    }
    
    // Audio controls
    const volumeSlider = document.getElementById('loop-volume');
    const volumeValue = document.getElementById('volume-value');
    if (volumeSlider && volumeValue) {
      const storedVolume = localStorage.getItem('bambiAudioVolume') || '0.8';
      const volume = parseFloat(storedVolume);
      volumeSlider.value = volume * 10;
      volumeValue.textContent = Math.round(volume * 100) + '%';
    }
    
    const speedSlider = document.getElementById('loop-speed');
    const speedValue = document.getElementById('speed-value');
    if (speedSlider && speedValue) {
      const storedSpeed = localStorage.getItem('bambiAudioSpeed') || '5';
      speedSlider.value = storedSpeed;
      updateSpeedLabel(storedSpeed, speedValue);
    }
    
    function updateSpeedLabel(value, element) {
      if (!element) return;
      const speedVal = parseInt(value);
      if (speedVal === 5) {
        element.textContent = 'Normal';
      } else if (speedVal < 5) {
        element.textContent = 'Slower ' + (5 - speedVal) + 'x';
      } else {
        element.textContent = 'Faster ' + (speedVal - 5) + 'x';
      }
    }
    
    // TTS Test functionality
    const ttsTestBtn = document.getElementById('tts-test-btn');
    const ttsTestInput = document.getElementById('tts-test-input');
    if (ttsTestBtn && ttsTestInput) {
      ttsTestBtn.addEventListener('click', function() {
        const testText = ttsTestInput.value.trim();
        if (testText && window.tts && window.do_tts) {
          const audioArray = [];
          window.tts.arrayPush(audioArray, testText);
          window.do_tts(audioArray);
          
          // Show feedback
          ttsTestBtn.textContent = 'Playing...';
          ttsTestBtn.disabled = true;
          
          // Re-enable button after a delay
          setTimeout(() => {
            ttsTestBtn.textContent = 'Test Voice';
            ttsTestBtn.disabled = false;
          }, 2000);
        } else if (!testText) {
          alert('Please enter text to test');
        } else {
          alert('TTS system not available');
        }
      });
    }
    
    // Initialize triggers
    let triggersInitialized = false;
    const initTriggers = () => {
      if (triggersInitialized) return;
      const triggerList = document.getElementById('trigger-list');
      if (!triggerList) return;
      
      triggersInitialized = true;
      
      if (window.bambiAudio && window.bambiAudio.refreshTriggers) {
        window.bambiAudio.refreshTriggers();
      }
      
      if (triggerList.children.length === 0 && typeof loadTriggerData === 'function') {
        loadTriggerData();
      }
      
      document.dispatchEvent(new CustomEvent('trigger-controls-loaded'));
    };
    
    if (document.getElementById('trigger-list')) {
      setTimeout(initTriggers, 100);
    }
    
    // Socket communication
    if (typeof socket === 'undefined' && typeof window.socket !== 'undefined') {
      socket = window.socket;
    }
    
    if (typeof socket !== 'undefined') {
      socket.on('worker:settings:response', function(data) {
        if (data && data.success) {
          showSettingsNotification(data.section);
        } else if (data) {
          showSettingsError(data.error || 'Unknown error');
        }
      });
      
      socket.on('worker:update', function(data) {
        if (!data || !data.type) return;
        switch (data.type) {
          case 'triggers':
            updateTriggerStatus(data.triggers);
            break;
          case 'collar':
            updateCollarStatus(data.active, data.message);
            break;
        }
      });
    }
    
    // Settings helpers
    function sendSettingsToWorker(section, settings) {
      if (!socket || !socket.connected) return false;
      
      const payload = {
        section: section,
        settings: settings,
        timestamp: Date.now(),
        username: document.body.getAttribute('data-username')
      };
      
      socket.emit('worker:settings:update', payload);
      return true;
    }
    
    function showSettingsNotification(section) {
      let notification = document.getElementById('settings-notification');
      if (!notification) {
        notification = document.createElement('div');
        notification.id = 'settings-notification';
        notification.className = 'settings-notification';
        document.body.appendChild(notification);
      }
      
      notification.textContent = `${section} settings saved`;
      notification.classList.add('show');
      setTimeout(() => notification.classList.remove('show'), 2000);
    }
    
    function showSettingsError(message) {
      let errorEl = document.getElementById('settings-error');
      if (!errorEl) {
        errorEl = document.createElement('div');
        errorEl.id = 'settings-error';
        errorEl.className = 'settings-error';
        document.body.appendChild(errorEl);
      }
      
      errorEl.textContent = message;
      errorEl.classList.add('show');
      setTimeout(() => errorEl.classList.remove('show'), 3000);
    }
    
    function updateTriggerStatus(triggers) {
      if (!Array.isArray(triggers)) return;
      localStorage.setItem('bambiActiveTriggers', JSON.stringify(triggers));
      if (window.bambiAudio && window.bambiAudio.refreshTriggers) {
        window.bambiAudio.refreshTriggers();
      }
    }
    
    function updateCollarStatus(active, message) {
      const collarEnable = document.getElementById('collar-enable');
      const textareaCollar = document.getElementById('textarea-collar');
      if (collarEnable) collarEnable.checked = !!active;
      if (textareaCollar && message) textareaCollar.value = message;
    }
    
    window.bambiSendSettings = sendSettingsToWorker;
    
    // Save button handlers
    document.querySelectorAll('.save-btn').forEach(button => {
      button.addEventListener('click', function() {
        const panelId = this.closest('.control-panel').id;
        let section, settings;
        
        switch (panelId) {
          case 'collar-panel':
            section = 'collar';
            settings = {
              enabled: document.getElementById('collar-enable').checked,
              text: document.getElementById('textarea-collar').value
            };
            break;
            
          case 'spirals-panel':
            section = 'spirals';
            settings = {
              enabled: document.getElementById('spirals-enable').checked,
              spiral1Width: parseFloat(document.getElementById('spiral1-width').value),
              spiral2Width: parseFloat(document.getElementById('spiral2-width').value),
              spiral1Speed: parseInt(document.getElementById('spiral1-speed').value),
              spiral2Speed: parseInt(document.getElementById('spiral2-speed').value)
            };
            break;
            
          case 'brainwave-panel':
            section = 'brainwave';
            settings = {
              enabled: document.getElementById('brainwave-enable').checked,
              mode: document.getElementById('brainwave-mode').value,
              carrierFrequency: parseInt(document.getElementById('carrier-frequency').value),
              volume: parseInt(document.getElementById('brainwave-volume').value)
            };
            if (settings.mode === 'custom') {
              settings.customFrequency = parseFloat(document.getElementById('custom-frequency').value);
            }
            break;
        }
        
        if (section && settings) {
          sendSettingsToWorker(section, settings);
        }
      });
    });
    
    // Trigger events
    document.addEventListener('triggers:changed', function(e) {
      if (e.detail && Array.isArray(e.detail.activeTriggers)) {
        sendSettingsToWorker('triggers', { activeTriggers: e.detail.activeTriggers });
      }
    });
    
    // Stats panel button handlers
    const refreshStatsBtn = document.getElementById('refresh-stats');
    const resetSessionBtn = document.getElementById('reset-session');
    
    if (refreshStatsBtn) {
      refreshStatsBtn.addEventListener('click', function() {
        updateRealtimeStats();
        this.textContent = 'âœ“ Refreshed';
        setTimeout(() => {
          this.textContent = 'ðŸ”„ Refresh';
        }, 1500);
      });
    }
    
    if (resetSessionBtn) {
      resetSessionBtn.addEventListener('click', function() {
        sessionStartTime = Date.now();
        // Reset displayed values
        document.getElementById('session-duration').textContent = '00:00';
        document.getElementById('session-xp').textContent = '0';
        document.getElementById('xp-per-hour').textContent = '0';
        document.getElementById('messages-count').textContent = '0';
        document.getElementById('triggers-count').textContent = '0';
        document.getElementById('audio-count').textContent = '0';
        
        this.textContent = 'âœ“ Reset';
        setTimeout(() => {
          this.textContent = 'ðŸ”„ Reset Session';
        }, 1500);
      });
    }
  });
</script>

<!-- Load scripts -->
<script src="/js/controls/utils.js"></script>
<script src="/js/controls/system.js"></script>
<script src="/js/text2speech.js"></script>
<script src="/js/triggers.js"></script>
<script src="/js/controls/trigger.js"></script>
<script src="/js/controls/collar.js"></script>
<script src="/js/controls/spiral.js"></script>
<script src="/js/controls/brainwave.js"></script>
<script src="/js/controls/advanced-binaural.js"></script>