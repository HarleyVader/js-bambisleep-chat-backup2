<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AIGF Circuit Breaker - Comprehensive Maintenance System</title>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: #333;
            animation: backgroundShift 20s ease-in-out infinite;
        }

        @keyframes backgroundShift {
            0%, 100% { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
            50% { background: linear-gradient(135deg, #764ba2 0%, #667eea 100%); }
        }

        .container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 40px;
            margin: 20px;
            max-width: 900px;
            width: 90%;
            text-align: center;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            position: relative;
            overflow: hidden;
            animation: containerPulse 3s ease-in-out infinite;
        }

        @keyframes containerPulse {
            0%, 100% { transform: scale(1); box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1); }
            50% { transform: scale(1.02); box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15); }
        }

        .container::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            animation: shimmer 3s ease-in-out infinite;
            pointer-events: none;
        }

        @keyframes shimmer {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .status-indicator {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            margin: 0 auto 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 40px;
            transition: all 0.3s ease;
        }

        .status-indicator.maintenance {
            background: linear-gradient(45deg, #ff6b6b, #feca57);
            color: white;
            animation: pulse 2s infinite;
        }

        .status-indicator.normal {
            background: linear-gradient(45deg, #48cae4, #06ffa5);
            color: white;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        h1 {
            font-size: 2.5em;
            margin-bottom: 20px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -moz-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .subtitle {
            font-size: 1.2em;
            color: #666;
            margin-bottom: 30px;
        }

        .countdown {
            font-size: 3em;
            font-weight: bold;
            margin: 20px 0;
            color: #ff6b6b;
        }

        .system-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }

        .info-card {
            background: rgba(255, 255, 255, 0.8);
            padding: 20px;
            border-radius: 15px;
            border: 2px solid #e0e0e0;
            transition: all 0.3s ease;
        }

        .info-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }

        .info-card h3 {
            color: #667eea;
            margin-bottom: 10px;
            font-size: 1.1em;
        }

        .status-dot {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .status-dot.online { background: #06ffa5; }
        .status-dot.offline { background: #ff6b6b; }
        .status-dot.maintenance { background: #feca57; }

        .admin-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 25px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
            z-index: 1000;
        }

        .admin-toggle:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .admin-panel {
            position: fixed;
            top: 0;
            right: -450px;
            width: 450px;
            height: 100vh;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 80px 30px 30px;
            box-shadow: -5px 0 20px rgba(0, 0, 0, 0.1);
            transition: right 0.3s ease;
            z-index: 999;
            overflow-y: auto;
        }

        .admin-panel.active {
            right: 0;
        }

        .admin-section {
            margin-bottom: 30px;
        }

        .admin-section h3 {
            color: #667eea;
            margin-bottom: 15px;
            border-bottom: 2px solid #e0e0e0;
            padding-bottom: 5px;
        }

        .control-group {
            margin-bottom: 15px;
        }

        .btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 25px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
            width: 100%;
            margin-bottom: 10px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .btn.danger {
            background: linear-gradient(45deg, #ff6b6b, #feca57);
        }

        .btn.success {
            background: linear-gradient(45deg, #48cae4, #06ffa5);
        }

        .deployment-log {
            background: #1a1a1a;
            color: #00ff00;
            padding: 15px;
            border-radius: 10px;
            height: 250px;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            margin-top: 10px;
            border: 1px solid #333;
        }

        .help-link {
            position: fixed;
            bottom: 20px;
            left: 20px;
            background: linear-gradient(45deg, #48cae4, #06ffa5);
            color: white;
            padding: 15px 25px;
            border-radius: 25px;
            text-decoration: none;
            font-weight: bold;
            transition: all 0.3s ease;
            z-index: 1000;
        }

        .help-link:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .mode-switch {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e0e0e0;
            border-radius: 4px;
            margin: 20px 0;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(45deg, #667eea, #764ba2);
            width: 0%;
            transition: width 0.3s ease;
            animation: progressShimmer 2s ease-in-out infinite;
        }

        @keyframes progressShimmer {
            0% { background-position: -200px 0; }
            100% { background-position: calc(200px + 100%) 0; }
        }

        .frontend-details {
            margin-top: 20px;
            text-align: left;
            background: rgba(255, 255, 255, 0.5);
            padding: 20px;
            border-radius: 10px;
            border-left: 4px solid #667eea;
        }

        .frontend-details h3 {
            color: #667eea;
            margin-bottom: 15px;
        }

        .detail-item {
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .detail-label {
            font-weight: bold;
            color: #333;
        }

        .detail-value {
            color: #666;
            background: rgba(255, 255, 255, 0.8);
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 0.9em;
        }

        @media (max-width: 768px) {
            .admin-panel {
                width: 100%;
                right: -100%;
            }
            
            .container {
                padding: 20px;
                margin: 20px;
            }
            
            .system-info {
                grid-template-columns: 1fr;
            }

            .mode-switch {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <button class="admin-toggle" onclick="toggleAdmin()">üõ†Ô∏è Admin</button>
    
    <div class="container">
        <div class="status-indicator maintenance" id="statusIndicator">
            ‚ö†Ô∏è
        </div>
        
        <h1>AIGF Comprehensive Maintenance System</h1>
        <p class="subtitle">Advanced deployment and upgrade control center</p>
        
        <div class="countdown" id="countdown">
            Estimating...
        </div>
        
        <div class="progress-bar">
            <div class="progress-fill" id="progressFill"></div>
        </div>

        <!-- Enhanced Frontend Details Section -->
        <div class="frontend-details">
            <h3>üìä Current Frontend Details</h3>
            <div class="detail-item">
                <span class="detail-label">Server Mode:</span>
                <span class="detail-value" id="serverMode">Maintenance</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Active Connections:</span>
                <span class="detail-value" id="activeConnections">0</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Last Deployment:</span>
                <span class="detail-value" id="lastDeployment">Unknown</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Circuit Breaker:</span>
                <span class="detail-value" id="circuitBreakerStatus">Active</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Socket.IO Status:</span>
                <span class="detail-value" id="socketStatus">Connected</span>
            </div>
        </div>
        
        <div class="system-info">
            <div class="info-card">
                <h3><span class="status-dot maintenance" id="frontendStatus"></span>Frontend Status</h3>
                <p id="frontendInfo">Circuit Breaker Active</p>
                <small id="frontendDetails">Serving maintenance page</small>
            </div>
            
            <div class="info-card">
                <h3><span class="status-dot offline" id="backendStatus"></span>Backend Status</h3>
                <p id="backendInfo">Under Maintenance</p>
                <small id="backendDetails">Server updating...</small>
            </div>
            
            <div class="info-card">
                <h3><span class="status-dot online" id="databaseStatus"></span>Database Status</h3>
                <p id="databaseInfo">Online</p>
                <small id="databaseDetails">Data preserved</small>
            </div>
            
            <div class="info-card">
                <h3><span class="status-dot maintenance" id="systemStatus"></span>System Status</h3>
                <p id="systemInfo">Deployment Mode</p>
                <small id="systemDetails">Running maintenance cycle</small>
            </div>
        </div>
        
        <p>Comprehensive maintenance and upgrade system with full deployment pipeline control</p>
    </div>
    
    <div class="admin-panel" id="adminPanel">
        <div class="admin-section">
            <h3>üöÄ Deployment Pipeline</h3>
            <div class="control-group">
                <button class="btn" onclick="executeCommand('git-pull')">üì• Git Pull</button>
                <button class="btn" onclick="executeCommand('npm-install')">üì¶ NPM Install</button>
                <button class="btn" onclick="executeCommand('restart-server')">üîÑ Restart Server</button>
                <button class="btn success" onclick="executeCommand('full-deploy')">üéØ Full Deploy</button>
            </div>
        </div>

        <div class="admin-section">
            <h3>üîÑ Advanced Commands</h3>
            <div class="control-group">
                <button class="btn" onclick="executeCommand('nvm-install')">üîß NVM Install Node</button>
                <button class="btn" onclick="executeCommand('git-status')">üìä Git Status</button>
                <button class="btn" onclick="executeCommand('system-check')">üîç System Check</button>
                <button class="btn" onclick="executeCommand('backup-system')">üíæ Backup System</button>
            </div>
        </div>
        
        <div class="admin-section">
            <h3>‚öôÔ∏è Mode Control</h3>
            <div class="mode-switch">
                <button class="btn danger" onclick="setMaintenanceMode(true)">üîß Maintenance</button>
                <button class="btn success" onclick="setMaintenanceMode(false)">‚úÖ Normal</button>
            </div>
        </div>
        
        <div class="admin-section">
            <h3>üìä System Info</h3>
            <div class="control-group">
                <button class="btn" onclick="refreshSystemInfo()">üîÑ Refresh Status</button>
                <p><strong>Uptime:</strong> <span id="uptimeInfo">Loading...</span></p>
                <p><strong>Memory:</strong> <span id="memoryInfo">Loading...</span></p>
                <p><strong>CPU:</strong> <span id="cpuInfo">Loading...</span></p>
                <p><strong>Node Version:</strong> <span id="nodeVersion">Loading...</span></p>
            </div>
        </div>
        
        <div class="admin-section">
            <h3>üìù Deployment Log</h3>
            <div class="deployment-log" id="deploymentLog">
                [System] Circuit breaker maintenance system initialized<br>
                [System] Ready for deployment commands...<br>
            </div>
        </div>
    </div>
    
    <a href="/help" class="help-link">‚ùì Help & Support</a>

    <script>
        let socket;
        let adminPanelOpen = false;
        let currentMode = 'maintenance';
        let connectionCount = 0;
        
        // Initialize Socket.IO connection
        function initSocket() {
            socket = io();
            
            socket.on('connect', () => {
                console.log('Connected to server');
                log('[Socket.IO] Connected to maintenance server');
                document.getElementById('socketStatus').textContent = 'Connected';
                requestStatus();
            });
            
            socket.on('disconnect', () => {
                console.log('Disconnected from server');
                log('[Socket.IO] Connection lost - attempting reconnection...');
                document.getElementById('socketStatus').textContent = 'Disconnected';
            });
            
            socket.on('statusUpdate', (data) => {
                updateStatus(data);
            });
            
            socket.on('countdownUpdate', (data) => {
                updateCountdown(data.remaining);
                updateProgress(data.progress);
            });
            
            socket.on('commandResult', (data) => {
                log(`[${data.command}] ${data.success ? 'SUCCESS' : 'FAILED'}`);
                if (data.output) {
                    log(`[Output] ${data.output}`);
                }
            });
            
            socket.on('systemInfo', (data) => {
                updateSystemInfo(data);
            });
            
            socket.on('modeChanged', (data) => {
                currentMode = data.mode;
                updateModeDisplay();
                log(`[Mode] Changed to: ${data.mode}`);
                document.getElementById('serverMode').textContent = data.mode.charAt(0).toUpperCase() + data.mode.slice(1);
            });

            socket.on('connectionCount', (data) => {
                connectionCount = data.count;
                document.getElementById('activeConnections').textContent = connectionCount;
            });
        }
        
        function toggleAdmin() {
            adminPanelOpen = !adminPanelOpen;
            const panel = document.getElementById('adminPanel');
            panel.classList.toggle('active', adminPanelOpen);
        }
        
        function executeCommand(command) {
            log(`[Admin] Executing: ${command}`);
            socket.emit('adminCommand', { command });
        }
        
        function setMaintenanceMode(enable) {
            const mode = enable ? 'maintenance' : 'normal';
            log(`[Admin] Setting mode to: ${mode}`);
            socket.emit('modeChange', { mode });
        }
        
        function refreshSystemInfo() {
            log('[Admin] Refreshing system information...');
            socket.emit('getSystemInfo');
        }
        
        function requestStatus() {
            socket.emit('requestStatus');
        }
        
        function updateStatus(data) {
            // Update status indicators
            updateStatusDot('frontendStatus', data.frontend?.status || 'maintenance');
            updateStatusDot('backendStatus', data.backend?.status || 'offline');
            updateStatusDot('databaseStatus', data.database?.status || 'online');
            updateStatusDot('systemStatus', data.system?.status || 'maintenance');
            
            // Update info text
            document.getElementById('frontendInfo').textContent = data.frontend?.info || 'Circuit Breaker Active';
            document.getElementById('backendInfo').textContent = data.backend?.info || 'Under Maintenance';
            document.getElementById('databaseInfo').textContent = data.database?.info || 'Online';
            document.getElementById('systemInfo').textContent = data.system?.info || 'Deployment Mode';
            
            // Update details
            document.getElementById('frontendDetails').textContent = data.frontend?.details || 'Serving maintenance page';
            document.getElementById('backendDetails').textContent = data.backend?.details || 'Server updating...';
            document.getElementById('databaseDetails').textContent = data.database?.details || 'Data preserved';
            document.getElementById('systemDetails').textContent = data.system?.details || 'Running maintenance cycle';

            // Update circuit breaker status
            document.getElementById('circuitBreakerStatus').textContent = 
                data.frontend?.status === 'maintenance' ? 'Active' : 'Inactive';
        }
        
        function updateStatusDot(elementId, status) {
            const dot = document.getElementById(elementId);
            dot.className = `status-dot ${status}`;
        }
        
        function updateCountdown(remaining) {
            const countdown = document.getElementById('countdown');
            if (remaining > 0) {
                const minutes = Math.floor(remaining / 60);
                const seconds = remaining % 60;
                countdown.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
            } else {
                countdown.textContent = 'Completing...';
            }
        }
        
        function updateProgress(progress) {
            const progressFill = document.getElementById('progressFill');
            progressFill.style.width = `${progress}%`;
        }
        
        function updateSystemInfo(data) {
            document.getElementById('uptimeInfo').textContent = data.uptime || 'N/A';
            document.getElementById('memoryInfo').textContent = data.memory || 'N/A';
            document.getElementById('cpuInfo').textContent = data.cpu || 'N/A';
            document.getElementById('nodeVersion').textContent = data.nodeVersion || process.version || 'N/A';
        }
        
        function updateModeDisplay() {
            const indicator = document.getElementById('statusIndicator');
            if (currentMode === 'normal') {
                indicator.className = 'status-indicator normal';
                indicator.textContent = '‚úÖ';
            } else {
                indicator.className = 'status-indicator maintenance';
                indicator.textContent = '‚ö†Ô∏è';
            }
        }
        
        function log(message) {
            const deploymentLog = document.getElementById('deploymentLog');
            const timestamp = new Date().toLocaleTimeString();
            deploymentLog.innerHTML += `[${timestamp}] ${message}<br>`;
            deploymentLog.scrollTop = deploymentLog.scrollHeight;
        }

        function updateLastDeployment() {
            // This would be updated from the server with actual deployment data
            const now = new Date();
            document.getElementById('lastDeployment').textContent = now.toLocaleString();
        }
        
        // Initialize on page load
        document.addEventListener('DOMContentLoaded', () => {
            initSocket();
            
            // Request initial status
            setTimeout(() => {
                refreshSystemInfo();
                updateLastDeployment();
            }, 1000);

            // Update connection count periodically
            setInterval(() => {
                if (socket && socket.connected) {
                    socket.emit('getConnectionCount');
                }
            }, 5000);
        });
        
        // Handle ESC key to close admin panel
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && adminPanelOpen) {
                toggleAdmin();
            }
        });
    </script>
</body>
</html>
