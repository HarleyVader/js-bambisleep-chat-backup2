<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="icon" type="image/x-icon" href="/static/favicon.ico">
    <script src="/socket.io/socket.io.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #ff69b4, #ff1493, #dc143c, #8b008b);
            background-size: 400% 400%;
            animation: hypnoticGradient 8s ease-in-out infinite;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            overflow: hidden;
        }

        @keyframes hypnoticGradient {
            0%, 100% { background-position: 0% 50%; }
            25% { background-position: 100% 50%; }
            50% { background-position: 100% 100%; }
            75% { background-position: 0% 100%; }
        }

        .maintenance-container {
            text-align: center;
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 3rem;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            border: 2px solid rgba(255, 255, 255, 0.1);
            max-width: 600px;
            position: relative;
            animation: pulse 3s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3); }
            50% { transform: scale(1.02); box-shadow: 0 25px 50px rgba(255, 105, 180, 0.4); }
        }

        .spiral-bg {
            position: absolute;
            top: -50px;
            left: -50px;
            right: -50px;
            bottom: -50px;
            background: conic-gradient(from 0deg, transparent, rgba(255, 105, 180, 0.1), transparent);
            animation: spiral 20s linear infinite;
            border-radius: 20px;
            z-index: -1;
        }

        @keyframes spiral {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        .title {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            background: linear-gradient(45deg, #ff69b4, #ffffff, #ff1493);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-weight: bold;
            animation: shimmer 2s ease-in-out infinite;
        }

        @keyframes shimmer {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.8; }
        }

        .message {
            font-size: 1.5rem;
            margin-bottom: 2rem;
            opacity: 0.9;
            line-height: 1.4;
        }

        .current-issue {
            background: rgba(255, 105, 180, 0.2);
            border: 1px solid rgba(255, 105, 180, 0.5);
            border-radius: 10px;
            padding: 1rem;
            margin-bottom: 2rem;
            font-size: 1.1rem;
        }

        .countdown-container {
            margin-bottom: 2rem;
        }

        .countdown-label {
            font-size: 1rem;
            opacity: 0.8;
            margin-bottom: 0.5rem;
        }

        .countdown {
            font-size: 3rem;
            font-weight: bold;
            color: #ff69b4;
            text-shadow: 0 0 20px rgba(255, 105, 180, 0.8);
            margin-bottom: 0.5rem;
            font-family: 'Courier New', monospace;
        }

        .estimated-time {
            font-size: 0.9rem;
            opacity: 0.7;
        }        .status-indicators {
            display: flex;
            justify-content: space-around;
            margin-top: 2rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        /* Status Grid - Enhanced for real-time display */
        .status-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin: 20px 0;
            padding: 20px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            border: 1px solid rgba(255, 105, 180, 0.3);
        }

        .status-grid .status-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            padding: 12px;
            min-width: auto;
        }

        .status-label {
            font-size: 0.8rem;
            opacity: 0.7;
            margin-bottom: 0.3rem;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .status-value {
            font-weight: bold;
            color: #ff69b4;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        /* Status Indicators */
        .status-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            display: inline-block;
        }

        .status-indicator.online {
            background: #00ff00;
            box-shadow: 0 0 10px #00ff00;
            animation: pulse 2s ease-in-out infinite;
        }

        .status-indicator.connecting {
            background: #ffaa00;
            box-shadow: 0 0 10px #ffaa00;
            animation: pulse 1s ease-in-out infinite;
        }

        .status-indicator.offline {
            background: #ff4444;
            box-shadow: 0 0 10px #ff4444;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        /* Progress bar */
        .progress-container {
            width: 100%;
            height: 20px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            overflow: hidden;
            margin-bottom: 20px;
            position: relative;
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, #ff69b4, #ff1493);
            border-radius: 10px;
            transition: width 1s ease-in-out;
            width: 0%;
            position: relative;
            box-shadow: 0 0 10px rgba(255, 105, 180, 0.5);
        }

        .progress-bar::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            animation: progressShine 2s ease-in-out infinite;
        }

        .progress-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 0.8rem;
            font-weight: bold;
            color: white;
            text-shadow: 0 0 5px rgba(0, 0, 0, 0.7);
            z-index: 1;
        }

        @keyframes progressShine {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        /* Timer Styles */
        .timer-display {
            font-family: 'Courier New', monospace;
            font-size: 1.5rem;
            font-weight: bold;
        }

        .timer-warning {
            color: #ff4444;
            animation: textGlow 1s ease-in-out infinite alternate;
        }

        @keyframes textGlow {
            0% { text-shadow: 0 0 10px currentColor; }
            100% { text-shadow: 0 0 20px currentColor, 0 0 30px currentColor; }
        }

        .status-item {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 0.8rem;
            min-width: 120px;
            animation: float 4s ease-in-out infinite;
        }

        .status-item:nth-child(2) { animation-delay: 1s; }
        .status-item:nth-child(3) { animation-delay: 2s; }

        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }

        .status-label {
            font-size: 0.8rem;
            opacity: 0.7;
            margin-bottom: 0.3rem;
        }

        .status-value {
            font-weight: bold;
            color: #ff69b4;
        }

        .connection-status {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.8);
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.8rem;
            border: 1px solid;
        }

        .connected {
            border-color: #00ff00;
            color: #00ff00;
        }

        .disconnected {
            border-color: #ff0000;
            color: #ff0000;
        }        @media (max-width: 768px) {
            .maintenance-container {
                padding: 2rem;
                margin: 1rem;
            }
            
            .title {
                font-size: 2rem;
            }
            
            .status-grid {
                grid-template-columns: 1fr;
                gap: 10px;
            }

            .status-grid .status-item {
                padding: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="connection-status" id="connectionStatus">
        ðŸ”Œ Connecting...
    </div>

    <div class="maintenance-container">
        <div class="spiral-bg"></div>
        
        <h1 class="title">BambiSleep.Chat</h1>
        <div class="message" id="mainMessage"><%= message %></div>
          <div class="current-issue" id="currentIssue">
            <strong>Current Task:</strong> <span id="issueText"><%= currentIssue %></span>
        </div>
        
        <!-- Real-time Status Display -->
        <div class="status-grid">
            <div class="status-item">
                <span class="status-label">Time Remaining:</span>
                <span class="status-value" id="timeRemaining">Calculating...</span>
            </div>
            <div class="status-item">
                <span class="status-label">Elapsed Time:</span>
                <span class="status-value" id="elapsedTime">Calculating...</span>
            </div>
            <div class="status-item">
                <span class="status-label">Expected Finish:</span>
                <span class="status-value" id="expectedFinish">Calculating...</span>
            </div>
            <div class="status-item">
                <span class="status-label">Server Status:</span>
                <span class="status-value" id="serverStatus">
                    <span class="status-indicator online"></span>
                    Circuit Breaker Active
                </span>
            </div>
        </div>
        
        <div class="progress-container">
            <div class="progress-bar" id="progressBar"></div>
            <div class="progress-text" id="progressText">0%</div>
        </div>
    </div>    <script>
        const socket = io();
        
        // State variables
        let maintenanceData = {
            startTime: Date.now(),
            countdown: <%= countdown %>,
            estimatedCompletion: Date.now() + (<%= countdown %> * 1000),
            message: '<%= message %>',
            currentIssue: '<%= currentIssue %>'
        };
        
        let connected = false;
        let timerInterval;

        // DOM elements
        const timeRemainingEl = document.getElementById('timeRemaining');
        const elapsedTimeEl = document.getElementById('elapsedTime');
        const expectedFinishEl = document.getElementById('expectedFinish');
        const serverStatusEl = document.getElementById('serverStatus');
        const progressBarEl = document.getElementById('progressBar');
        const progressTextEl = document.getElementById('progressText');
        const connectionStatusEl = document.getElementById('connectionStatus');
        const mainMessageEl = document.getElementById('mainMessage');
        const issueTextEl = document.getElementById('issueText');

        // Format time duration
        function formatDuration(seconds) {
            if (seconds <= 0) return '00:00';
            
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = Math.floor(seconds % 60);
            
            if (hours > 0) {
                return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            }
            return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
        }

        // Format time
        function formatTime(timestamp) {
            return new Date(timestamp).toLocaleTimeString('en-US', {
                hour12: false,
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
        }

        // Update display
        function updateDisplay() {
            const now = Date.now();
            const elapsed = Math.floor((now - maintenanceData.startTime) / 1000);
            const remaining = Math.max(0, maintenanceData.countdown - elapsed);
            
            // Update time displays
            const remainingClass = remaining < 60 ? 'timer-warning' : '';
            timeRemainingEl.innerHTML = `<span class="timer-display ${remainingClass}">${formatDuration(remaining)}</span>`;
            elapsedTimeEl.innerHTML = `<span class="timer-display">${formatDuration(elapsed)}</span>`;
            expectedFinishEl.innerHTML = `<span class="timer-display">${formatTime(maintenanceData.estimatedCompletion)}</span>`;
            
            // Calculate and update progress
            const totalDuration = maintenanceData.countdown;
            const progress = totalDuration > 0 ? Math.min(100, (elapsed / totalDuration) * 100) : 0;
            
            progressBarEl.style.width = `${progress}%`;
            progressTextEl.textContent = `${Math.round(progress)}%`;
            
            // Update progress bar color based on completion
            if (progress > 90) {
                progressBarEl.style.background = 'linear-gradient(90deg, #00ff00, #17dbd8)';
            } else if (progress > 75) {
                progressBarEl.style.background = 'linear-gradient(90deg, #ffaa00, #ff1493)';
            }
        }

        // Socket event handlers
        socket.on('connect', () => {
            connected = true;
            connectionStatusEl.textContent = 'ðŸŸ¢ Connected';
            connectionStatusEl.className = 'connection-status connected';
            serverStatusEl.innerHTML = '<span class="status-indicator online"></span>Circuit Breaker Active';
            
            // Request current status
            socket.emit('requestStatus');
        });

        socket.on('disconnect', () => {
            connected = false;
            connectionStatusEl.textContent = 'ðŸ”´ Disconnected';
            connectionStatusEl.className = 'connection-status disconnected';
            serverStatusEl.innerHTML = '<span class="status-indicator offline"></span>Circuit Breaker Offline';
        });

        socket.on('statusUpdate', (data) => {
            console.log('Received status update:', data);
            
            // Update maintenance data
            if (data.startTime) maintenanceData.startTime = data.startTime;
            if (data.countdown) maintenanceData.countdown = data.countdown;
            if (data.estimatedCompletion) maintenanceData.estimatedCompletion = data.estimatedCompletion;
            if (data.message) {
                maintenanceData.message = data.message;
                mainMessageEl.textContent = data.message;
            }
            if (data.currentIssue) {
                maintenanceData.currentIssue = data.currentIssue;
                issueTextEl.textContent = data.currentIssue;
            }
            
            updateDisplay();
        });

        socket.on('countdownUpdate', (data) => {
            // Real-time countdown updates
            if (data.remaining !== undefined) {
                const now = Date.now();
                const elapsed = data.elapsed || Math.floor((now - maintenanceData.startTime) / 1000);
                
                // Update our local state
                maintenanceData.countdown = data.remaining + elapsed;
                updateDisplay();
            }
        });

        // Start the display update timer
        function startTimer() {
            if (timerInterval) clearInterval(timerInterval);
            timerInterval = setInterval(updateDisplay, 1000);
            updateDisplay(); // Initial update
        }

        // Initialize
        startTimer();
        
        // Auto-refresh if maintenance is complete
        function checkForCompletion() {
            const now = Date.now();
            const elapsed = Math.floor((now - maintenanceData.startTime) / 1000);
            const remaining = Math.max(0, maintenanceData.countdown - elapsed);
            
            if (remaining <= 0 && elapsed > 10) {
                setTimeout(() => {
                    window.location.href = '/';
                }, 5000);
            }
        }
        
        setInterval(checkForCompletion, 5000);

        // Handle page visibility changes
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden && connected) {
                socket.emit('requestStatus');
                updateDisplay();
            }
        });

        // Request status update every 30 seconds
        setInterval(() => {
            if (connected) {
                socket.emit('requestStatus');
            }
        }, 30000);
    </script>
</body>
</html>
