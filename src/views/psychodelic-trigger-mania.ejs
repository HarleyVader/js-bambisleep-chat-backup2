<!DOCTYPE html>
<html lang="en">
    <%- include('partials/head') %>
    <title>Psychodelic Trigger Mania</title>
    <style>
        .trigger-mania-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .file-upload-section {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .file-upload-section h2 {
            color: #00ccff;
            margin-bottom: 15px;
        }
        
        .file-upload {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 15px;
        }
          .file-upload input[type="file"] {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 5px;
            padding: 8px;
            color: #17dbd8;
        }
        
        .status-message {
            padding: 10px;
            border-radius: 5px;
            margin-top: 10px;
            background: rgba(0, 255, 255, 0.1);
            color: #00ccff;
        }
        
        .status-message.error {
            background: rgba(255, 0, 0, 0.1);
            color: #ff7777;
        }
        
        .chat-container {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 8px;
            padding: 20px;
            min-height: 300px;
        }
        
        .response-container {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .response-text {
            padding: 15px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 5px;
            line-height: 1.5;
        }
        
        .response-text .trigger-highlight {
            color: #ff00ff;
            font-weight: bold;
            text-transform: uppercase;
            text-shadow: 0 0 5px #ff00ff;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }
    </style>

<body>
    <%- include('partials/nav', { path: '/triggers/mania' }) %>
    
    <div class="trigger-mania-container">
        <h1>Psychodelic Trigger Mania</h1>
        
        <div class="file-upload-section">
            <h2>Upload Text File</h2>
            <div class="file-upload">
                <input type="file" id="upload-file" accept=".txt">
                <button id="process-file" class="secondary-btn" disabled>Process File</button>
            </div>
            <div class="status-message" id="status-message" style="display: none;"></div>
        </div>
        
        <div id="system-controls-container">
            <%- include('partials/profile-system-controls.ejs', { profile: req.user }) %>
        </div>
        
        <div class="chat-container">
            <div class="response-container" id="response-container">
                <div class="response-text">Ready to process trigger sequences...</div>
            </div>
            <audio id="audio" style="display: none;"></audio>
        </div>
    </div>

    <!-- Core scripts -->
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/p5@1.4.0/lib/p5.js"></script>
    <script src="js/bootstrap.min.js"></script>
    <script src="js/aigf-core.js"></script>
    <script src="js/text2speech.js"></script>
    <script src="js/responsive.js"></script>
    <script src="js/triggers.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const fileInput = document.getElementById('upload-file');
            const processBtn = document.getElementById('process-file');
            const statusMessage = document.getElementById('status-message');
            const responseContainer = document.getElementById('response-container');
            
            // Set up audio element for TTS (same as aigf-core.js)
            window.audio = document.getElementById('audio');
            
            let currentFile = null;
            let triggerData = [];
            let audioArray = [];
            let isProcessing = false;
            
            // Load trigger data first
            loadTriggerData();
            
            // File input handler
            fileInput.addEventListener('change', function(event) {
                const file = event.target.files[0];
                if (file && file.type === 'text/plain') {
                    currentFile = file;
                    processBtn.disabled = false;
                    showStatus(`File "${file.name}" ready to process`, false);
                } else {
                    currentFile = null;
                    processBtn.disabled = true;
                    showStatus('Please select a valid text file', true);
                }
            });
            
            // Process button handler
            processBtn.addEventListener('click', function() {
                if (!currentFile || isProcessing) return;
                
                isProcessing = true;
                processBtn.disabled = true;
                
                const reader = new FileReader();
                reader.onload = function(e) {
                    const content = e.target.result;
                    processTextContent(content);
                };
                reader.readAsText(currentFile);
            });
            
            function loadTriggerData() {
                fetch('/config/triggers.json')
                    .then(response => response.json())
                    .then(data => {
                        triggerData = data.triggers || [];
                        console.log('Loaded trigger data:', triggerData);
                    })
                    .catch(error => {
                        console.error('Error loading trigger data:', error);
                        triggerData = [];
                    });
            }
            
            function processTextContent(content) {
                showStatus('Processing text content...', false);
                
                // Split into sentences
                const sentences = content.split(/(?<=[:;,.!?-*]["']?)\s+|\n+/g)
                    .filter(sentence => sentence.trim() !== '');
                
                if (sentences.length === 0) {
                    showStatus('No valid sentences found in file', true);
                    isProcessing = false;
                    processBtn.disabled = false;
                    return;
                }
                
                // Count triggers in the text
                const triggerCount = countTriggersInText(content);
                const triggerInfo = triggerCount > 0 ? ` (${triggerCount} triggers detected)` : '';
                
                showStatus(`Processing ${sentences.length} trigger sequences${triggerInfo}...`, false);
                
                // Clear response container
                responseContainer.innerHTML = '';
                
                // Clear audio array
                audioArray = [];
                
                // Process each sentence
                processSentences(sentences);
            }
            
            function countTriggersInText(text) {
                if (!triggerData || triggerData.length === 0) return 0;
                
                let count = 0;
                triggerData.forEach(trigger => {
                    const regex = new RegExp(`\\b${trigger.name}\\b`, 'gi');
                    const matches = text.match(regex);
                    if (matches) count += matches.length;
                });
                
                return count;
            }
            
            function processSentences(sentences) {
                let currentIndex = 0;
                
                // Process sentences sequentially
                function processNext() {
                    if (currentIndex >= sentences.length) {
                        // All sentences processed, now start TTS
                        if (audioArray.length > 0 && window.do_tts) {
                            showStatus('Starting audio playback...', false);
                            window.do_tts(audioArray);
                        } else {
                            showStatus('Processing complete!', false);
                            isProcessing = false;
                            processBtn.disabled = false;
                        }
                        return;
                    }
                    
                    const sentence = sentences[currentIndex].trim();
                    if (!sentence) {
                        currentIndex++;
                        processNext();
                        return;
                    }
                    
                    // Add to response container with trigger highlighting
                    const responseDiv = document.createElement('div');
                    responseDiv.className = 'response-text';
                    responseDiv.innerHTML = highlightTriggers(sentence);
                    responseContainer.appendChild(responseDiv);
                    
                    // Add to TTS queue using the same system as aigf-core.js
                    if (window.tts && typeof window.tts.arrayPush === 'function') {
                        window.tts.arrayPush(audioArray, sentence);
                    }
                    
                    currentIndex++;
                    
                    // Process next sentence after brief delay
                    setTimeout(processNext, 50);
                }
                
                // Set up audio end handler to reset state when all audio is done
                if (window.audio) {
                    const originalOnEnded = window.audio.onended;
                    window.audio.onended = function() {
                        if (originalOnEnded) originalOnEnded();
                        // If audio queue is empty, reset processing state
                        if (audioArray.length === 0) {
                            showStatus('All audio playback complete!', false);
                            isProcessing = false;
                            processBtn.disabled = false;
                        }
                    };
                }
                
                // Start processing
                processNext();
            }
            
            function highlightTriggers(text) {
                if (!triggerData || triggerData.length === 0) return text;
                
                let highlightedText = text;
                
                // Find and highlight triggers
                triggerData.forEach(trigger => {
                    const regex = new RegExp(`\\b${trigger.name}\\b`, 'gi');
                    highlightedText = highlightedText.replace(regex, match => 
                        `<span class="trigger-highlight">${match.toUpperCase()}</span>`
                    );
                });
                
                return highlightedText;
            }
            
            function showStatus(message, isError = false) {
                statusMessage.textContent = message;
                statusMessage.className = 'status-message' + (isError ? ' error' : '');
                statusMessage.style.display = 'block';
            }
            
            // Socket setup
            if (window.socket) {
                const username = getCookie('bambiname') || 'anonBambi';
                window.socket.emit('join-psychodelic-trigger-mania', { username });
                
                if (username !== 'anonBambi') {
                    window.socket.emit('join-profile', username);
                }
            }
            
            function getCookie(name) {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(';').shift();
            }
        });
    </script>

    <%- include('partials/footer') %>
</body>

</html>
