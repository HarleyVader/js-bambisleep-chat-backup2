<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <style>
        :root {
            --primary-color: #1a1a2e;
            --secondary-color: #16213e;
            --tertiary-color: #0f3460;
            --accent-color: #e94560;
            --text-color: #ffffff;
            --glow-color: #ff40e5;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Audiowide', 'Arial', sans-serif;
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 50%, var(--tertiary-color) 100%);
            color: var(--text-color);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            position: relative;
        }

        /* Animated background */
        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: 
                radial-gradient(circle at 20% 80%, rgba(255, 64, 229, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(233, 69, 96, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(15, 52, 96, 0.3) 0%, transparent 50%);
            animation: backgroundPulse 4s ease-in-out infinite alternate;
        }

        @keyframes backgroundPulse {
            0% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        /* Spiral animation */
        .spiral {
            position: absolute;
            width: 200px;
            height: 200px;
            border: 3px solid transparent;
            border-top: 3px solid var(--glow-color);
            border-radius: 50%;
            animation: spiral 2s linear infinite;
            opacity: 0.6;
        }

        .spiral:nth-child(1) {
            top: 10%;
            left: 10%;
            animation-delay: 0s;
        }

        .spiral:nth-child(2) {
            top: 60%;
            right: 10%;
            animation-delay: 0.5s;
            border-top-color: var(--accent-color);
        }

        .spiral:nth-child(3) {
            bottom: 10%;
            left: 50%;
            transform: translateX(-50%);
            animation-delay: 1s;
            border-top-color: #17dbd8;
        }

        @keyframes spiral {
            0% { transform: rotate(0deg) scale(1); }
            50% { transform: rotate(180deg) scale(1.1); }
            100% { transform: rotate(360deg) scale(1); }
        }

        /* Main content container */
        .maintenance-container {
            text-align: center;
            z-index: 10;
            max-width: 600px;
            padding: 40px;
            background: rgba(26, 26, 46, 0.8);
            border-radius: 20px;
            border: 2px solid var(--glow-color);
            box-shadow: 
                0 0 30px rgba(255, 64, 229, 0.5),
                inset 0 0 30px rgba(255, 64, 229, 0.1);
            backdrop-filter: blur(10px);
        }

        .logo {
            font-size: 3rem;
            font-weight: bold;
            margin-bottom: 20px;
            text-shadow: 0 0 20px var(--glow-color);
            animation: textGlow 2s ease-in-out infinite alternate;
        }

        @keyframes textGlow {
            0% { text-shadow: 0 0 20px var(--glow-color); }
            100% { text-shadow: 0 0 30px var(--glow-color), 0 0 40px var(--glow-color); }
        }

        .maintenance-title {
            font-size: 2.5rem;
            margin-bottom: 15px;
            color: var(--accent-color);
            text-transform: uppercase;
            letter-spacing: 2px;
        }

        .maintenance-message {
            font-size: 1.5rem;
            margin-bottom: 10px;
            color: var(--glow-color);
        }

        .maintenance-subtitle {
            font-size: 1.2rem;
            margin-bottom: 20px;
            color: #17dbd8;
            font-style: italic;
        }

        .estimated-time {
            font-size: 1rem;
            color: #cccccc;
            margin-bottom: 30px;
        }

        /* Loading animation */
        .loading-dots {
            display: inline-block;
            margin-left: 5px;
        }

        .loading-dots::after {
            content: '';
            animation: loadingDots 1.5s linear infinite;
        }

        @keyframes loadingDots {
            0%, 20% { content: ''; }
            40% { content: '.'; }
            60% { content: '..'; }
            80%, 100% { content: '...'; }
        }        /* Progress bar */
        .progress-container {
            width: 100%;
            height: 20px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            overflow: hidden;
            margin-bottom: 20px;
            position: relative;
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, var(--glow-color), var(--accent-color));
            border-radius: 10px;
            transition: width 1s ease-in-out;
            width: 0%;
            position: relative;
            box-shadow: 0 0 10px rgba(255, 64, 229, 0.5);
        }

        .progress-bar::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            animation: progressShine 2s ease-in-out infinite;
        }

        .progress-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 0.8rem;
            font-weight: bold;
            color: var(--text-color);
            text-shadow: 0 0 5px rgba(0, 0, 0, 0.7);
            z-index: 1;
        }

        @keyframes progressShine {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        /* Status Grid */
        .status-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin: 20px 0;
            padding: 20px;
            background: rgba(22, 33, 62, 0.6);
            border-radius: 15px;
            border: 1px solid rgba(255, 64, 229, 0.3);
        }

        .status-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
        }

        .status-label {
            font-size: 0.9rem;
            color: #cccccc;
            margin-bottom: 5px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .status-value {
            font-size: 1.1rem;
            font-weight: bold;
            color: var(--glow-color);
            text-shadow: 0 0 10px var(--glow-color);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        /* Status Indicators */
        .status-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            display: inline-block;
        }

        .status-indicator.online {
            background: #00ff00;
            box-shadow: 0 0 10px #00ff00;
            animation: pulse 2s ease-in-out infinite;
        }

        .status-indicator.connecting {
            background: #ffaa00;
            box-shadow: 0 0 10px #ffaa00;
            animation: pulse 1s ease-in-out infinite;
        }

        .status-indicator.offline {
            background: #ff4444;
            box-shadow: 0 0 10px #ff4444;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        /* Connection Status */
        .connection-status {
            font-size: 0.9rem;
            color: #cccccc;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        /* Timer Styles */
        .timer-display {
            font-family: 'Courier New', monospace;
            font-size: 1.5rem;
            font-weight: bold;
        }

        .timer-warning {
            color: var(--accent-color);
            animation: textGlow 1s ease-in-out infinite alternate;
        }
        }

        /* Floating particles */
        .particle {
            position: absolute;
            width: 4px;
            height: 4px;
            background: var(--glow-color);
            border-radius: 50%;
            animation: float 6s ease-in-out infinite;
        }

        .particle:nth-child(4) {
            top: 20%;
            left: 20%;
            animation-delay: 0s;
        }

        .particle:nth-child(5) {
            top: 40%;
            right: 30%;
            animation-delay: 1s;
        }

        .particle:nth-child(6) {
            bottom: 30%;
            left: 40%;
            animation-delay: 2s;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) scale(1); opacity: 0.8; }
            50% { transform: translateY(-20px) scale(1.2); opacity: 1; }        }

        /* Timer Styles */
        .timer-display {
            font-family: 'Courier New', monospace;
            font-size: 1.5rem;
            font-weight: bold;
        }

        .timer-warning {
            color: var(--accent-color);
            animation: textGlow 1s ease-in-out infinite alternate;
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .maintenance-container {
                margin: 20px;
                padding: 30px 20px;
            }
            
            .logo {
                font-size: 2rem;
            }
            
            .maintenance-title {
                font-size: 1.8rem;
            }
            
            .maintenance-message {
                font-size: 1.2rem;
            }

            .status-grid {
                grid-template-columns: 1fr;
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <!-- Animated spirals -->
    <div class="spiral"></div>
    <div class="spiral"></div>
    <div class="spiral"></div>
    
    <!-- Floating particles -->
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>    <div class="maintenance-container">
        <div class="logo">🧠 BAMBISLEEP.CHAT 👁️</div>
        
        <h1 class="maintenance-title">Maintenance Mode</h1>
        
        <p class="maintenance-message" id="maintenanceMessage"><%= message || 'Bambi is making everything prettier...' %><span class="loading-dots"></span></p>
        
        <p class="maintenance-subtitle" id="currentIssue"><%= currentIssue || 'Updating hypnotic experience' %></p>
        
        <!-- Real-time Status Display -->
        <div class="status-grid">
            <div class="status-item">
                <span class="status-label">Time Remaining:</span>
                <span class="status-value" id="timeRemaining">Calculating...</span>
            </div>
            <div class="status-item">
                <span class="status-label">Elapsed Time:</span>
                <span class="status-value" id="elapsedTime">Calculating...</span>
            </div>
            <div class="status-item">
                <span class="status-label">Expected Finish:</span>
                <span class="status-value" id="expectedFinish">Calculating...</span>
            </div>
            <div class="status-item">
                <span class="status-label">Server Status:</span>
                <span class="status-value" id="serverStatus">
                    <span class="status-indicator online"></span>
                    Circuit Breaker Active
                </span>
            </div>
        </div>
        
        <div class="progress-container">
            <div class="progress-bar" id="progressBar"></div>
            <div class="progress-text" id="progressText">0%</div>
        </div>
        
        <div class="connection-status" id="connectionStatus">
            <span class="status-indicator connecting"></span>
            Connecting to server...
        </div>
        
        <p style="font-size: 0.9rem; color: #888; margin-top: 20px;">
            💖 Your hypnotic AI girlfriend will be back shortly!
        </p>
    </div>    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Initialize Socket.IO connection
        const socket = io();
        
        // State variables
        let maintenanceData = {
            startTime: Date.now(),
            countdown: 300,
            estimatedCompletion: Date.now() + (5 * 60 * 1000),
            message: 'Bambi is making everything prettier...',
            currentIssue: 'Updating hypnotic experience'
        };
        
        let connected = false;
        let timerInterval;

        // DOM elements
        const timeRemainingEl = document.getElementById('timeRemaining');
        const elapsedTimeEl = document.getElementById('elapsedTime');
        const expectedFinishEl = document.getElementById('expectedFinish');
        const serverStatusEl = document.getElementById('serverStatus');
        const progressBarEl = document.getElementById('progressBar');
        const progressTextEl = document.getElementById('progressText');
        const connectionStatusEl = document.getElementById('connectionStatus');
        const maintenanceMessageEl = document.getElementById('maintenanceMessage');
        const currentIssueEl = document.getElementById('currentIssue');

        // Format time duration
        function formatDuration(seconds) {
            if (seconds <= 0) return '00:00';
            
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = Math.floor(seconds % 60);
            
            if (hours > 0) {
                return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            }
            return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
        }

        // Format time for display
        function formatTime(timestamp) {
            return new Date(timestamp).toLocaleTimeString();
        }

        // Update timers and progress
        function updateDisplay() {
            const now = Date.now();
            const elapsed = Math.floor((now - maintenanceData.startTime) / 1000);
            const remaining = Math.max(0, maintenanceData.countdown - elapsed);
            
            // Update time displays
            elapsedTimeEl.innerHTML = `<span class="timer-display">${formatDuration(elapsed)}</span>`;
            
            if (remaining > 0) {
                timeRemainingEl.innerHTML = `<span class="timer-display ${remaining < 60 ? 'timer-warning' : ''}">${formatDuration(remaining)}</span>`;
            } else {
                timeRemainingEl.innerHTML = `<span class="timer-display timer-warning">Completing...</span>`;
            }
            
            expectedFinishEl.innerHTML = `<span class="timer-display">${formatTime(maintenanceData.estimatedCompletion)}</span>`;
            
            // Calculate and update progress
            const totalDuration = maintenanceData.countdown;
            const progress = totalDuration > 0 ? Math.min(100, (elapsed / totalDuration) * 100) : 0;
            
            progressBarEl.style.width = `${progress}%`;
            progressTextEl.textContent = `${Math.round(progress)}%`;
            
            // Update progress bar color based on completion
            if (progress > 90) {
                progressBarEl.style.background = 'linear-gradient(90deg, #00ff00, #17dbd8)';
            } else if (progress > 75) {
                progressBarEl.style.background = 'linear-gradient(90deg, #ffaa00, var(--accent-color))';
            }
        }

        // Socket event handlers
        socket.on('connect', () => {
            connected = true;
            connectionStatusEl.innerHTML = '<span class="status-indicator online"></span>Connected to server';
            serverStatusEl.innerHTML = '<span class="status-indicator online"></span>Circuit Breaker Active';
            
            // Request current status
            socket.emit('requestStatus');
        });

        socket.on('disconnect', () => {
            connected = false;
            connectionStatusEl.innerHTML = '<span class="status-indicator offline"></span>Disconnected from server';
            serverStatusEl.innerHTML = '<span class="status-indicator offline"></span>Circuit Breaker Offline';
        });

        socket.on('statusUpdate', (data) => {
            console.log('Received status update:', data);
            
            // Update maintenance data
            if (data.startTime) maintenanceData.startTime = data.startTime;
            if (data.countdown) maintenanceData.countdown = data.countdown;
            if (data.estimatedCompletion) maintenanceData.estimatedCompletion = data.estimatedCompletion;
            if (data.message) {
                maintenanceData.message = data.message;
                maintenanceMessageEl.innerHTML = data.message + '<span class="loading-dots"></span>';
            }
            if (data.currentIssue) {
                maintenanceData.currentIssue = data.currentIssue;
                currentIssueEl.textContent = data.currentIssue;
            }
            
            updateDisplay();
        });

        socket.on('countdownUpdate', (data) => {
            // Real-time countdown updates
            if (data.remaining !== undefined) {
                const now = Date.now();
                const elapsed = data.elapsed || Math.floor((now - maintenanceData.startTime) / 1000);
                
                // Update our local state
                maintenanceData.countdown = data.remaining + elapsed;
                updateDisplay();
            }
        });

        // Start the display update timer
        function startTimer() {
            if (timerInterval) clearInterval(timerInterval);
            timerInterval = setInterval(updateDisplay, 1000);
            updateDisplay(); // Initial update
        }

        // Initialize
        startTimer();
        
        // Auto-refresh if maintenance is complete
        function checkForCompletion() {
            const now = Date.now();
            const elapsed = Math.floor((now - maintenanceData.startTime) / 1000);
            const remaining = Math.max(0, maintenanceData.countdown - elapsed);
            
            if (remaining <= 0 && elapsed > 10) {
                setTimeout(() => {
                    window.location.href = '/';
                }, 5000);
            }
        }
        
        setInterval(checkForCompletion, 5000);
        
        // Add some dynamic particles
        function createParticle() {
            const particle = document.createElement('div');
            particle.className = 'particle';
            particle.style.left = Math.random() * 100 + '%';
            particle.style.top = Math.random() * 100 + '%';
            particle.style.animationDelay = Math.random() * 3 + 's';
            document.body.appendChild(particle);
            
            setTimeout(() => {
                particle.remove();
            }, 6000);
        }
        
        // Create a new particle every 2 seconds
        setInterval(createParticle, 2000);

        // Handle page visibility changes
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden && connected) {
                socket.emit('requestStatus');
                updateDisplay();
            }
        });
    </script>
</body>
</html>
