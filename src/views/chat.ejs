<%- include('partials/header', { title }); %>

<div class="container">
  <div class="row">
    <div class="col-md-3">
      <div class="sidebar">
        <div class="profile-section">
          <% if (profile) { %>
            <h3>Profile: <%= username %></h3>
            <div class="profile-stats">
              <p>Level: <span id="user-level"><%= Math.floor(profile.xp / 1000) %></span></p>
              <p>XP: <span id="user-xp"><%= profile.xp %></span></p>
            </div>
          <% } else { %>
            <h3>Welcome, <%= username %></h3>
            <p>Create a profile to track your progress</p>
          <% } %>
        </div>
        
        <div class="triggers-section">
          <h3>Triggers</h3>
          <div class="trigger-list">
            <% if (triggers && triggers.length > 0) { %>
              <% triggers.forEach(trigger => { %>
                <button class="trigger-btn" data-trigger="<%= trigger.name %>">
                  <%= trigger.name %>
                </button>
              <% }); %>
            <% } else { %>
              <p>No triggers available</p>
            <% } %>
          </div>
        </div>
      </div>
    </div>
    
    <div class="col-md-9">
      <div class="chat-container">
        <div class="chat-header">
          <h2>BambiSleep Chat</h2>
        </div>
        
        <div class="chat-messages">
          <ul id="chat-response">
            <% if (chatMessages && chatMessages.length > 0) { %>
              <% chatMessages.forEach(msg => { %>
                <li>
                  <span class="chat-time"><%= new Date(msg.timestamp).toLocaleTimeString([], {hour12: false}) %></span> -
                  <span class="chat-username"><a href="/profile/<%= msg.username %>" class="username-link"><%= msg.username %></a>:</span>
                  <span class="chat-message"><%= msg.data %></span>
                </li>
              <% }); %>
            <% } else { %>
              <li class="system-message">No messages yet. Be the first to chat!</li>
            <% } %>
          </ul>
        </div>
        
        <div class="chat-input">
          <form id="chat-form">
            <div class="input-group">
              <input type="text" id="chat-message" class="form-control" placeholder="Type your message..." autocomplete="off">
              <div class="input-group-append">
                <button class="btn btn-primary" type="submit">Send</button>
              </div>
            </div>
          </form>
        </div>
      </div>
      
      <div class="aigf-container">
        <div class="aigf-header">
          <h3>AI Chat</h3>
        </div>
        
        <div class="aigf-response">
          <div id="response"></div>
        </div>
        
        <div class="aigf-input">
          <form id="aigf-form">
            <div class="input-group">
              <input type="text" id="user-prompt" class="form-control" placeholder="Talk to Bambi..." autocomplete="off">
              <div class="input-group-append">
                <button class="btn btn-secondary" id="submit" type="submit">Ask</button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<audio id="audio" style="display: none;"></audio>

<!-- Include Scripts -->
<script src="/socket.io/socket.io.js"></script>
<script src="/js/aigf-core.js"></script>
<script src="/js/enhanced-chat.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Chat form submission
    const chatForm = document.getElementById('chat-form');
    const chatInput = document.getElementById('chat-message');
    
    chatForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const message = chatInput.value.trim();
      if (message) {
        // Send message to server
        socket.emit('chat message', { data: message });
        chatInput.value = '';
      }
    });
    
    // Set up trigger buttons
    const triggerButtons = document.querySelectorAll('.trigger-btn');
    triggerButtons.forEach(button => {
      button.addEventListener('click', function() {
        const triggerName = this.getAttribute('data-trigger');
        socket.emit('triggers', { triggerNames: [triggerName] });
        
        // Flash visual feedback
        this.classList.add('active');
        setTimeout(() => {
          this.classList.remove('active');
        }, 300);
      });
    });
    
    // XP update handling
    socket.on('xp:update', function(data) {
      const xpElement = document.getElementById('user-xp');
      const levelElement = document.getElementById('user-level');
      
      if (xpElement) xpElement.textContent = data.xp;
      if (levelElement) levelElement.textContent = data.level;
      
      // Show XP gain notification
      showXpNotification(data.xpEarned, data.reason);
    });
    
    // Level up handling
    socket.on('level-up', function(data) {
      showLevelUpNotification(data.level);
    });
    
    // Show XP notification
    function showXpNotification(amount, reason) {
      const notificationArea = document.getElementById('notification-area') || createNotificationArea();
      
      const notification = document.createElement('div');
      notification.className = 'in-app-notification xp-notification';
      notification.innerHTML = `
        <span class="notification-title">+${amount} XP Gained</span>
        <span class="notification-message">From: ${reason}</span>
      `;
      
      notificationArea.appendChild(notification);
      
      // Remove after 3 seconds
      setTimeout(() => {
        notification.classList.add('notification-hiding');
        setTimeout(() => notification.remove(), 500);
      }, 3000);
    }
    
    // Show level up notification
    function showLevelUpNotification(level) {
      const notificationArea = document.getElementById('notification-area') || createNotificationArea();
      
      const notification = document.createElement('div');
      notification.className = 'in-app-notification level-notification';
      notification.innerHTML = `
        <span class="notification-title">Level Up!</span>
        <span class="notification-message">You are now level ${level}</span>
      `;
      
      notificationArea.appendChild(notification);
      
      // Remove after 5 seconds
      setTimeout(() => {
        notification.classList.add('notification-hiding');
        setTimeout(() => notification.remove(), 500);
      }, 5000);
    }
    
    // Create notification area if needed
    function createNotificationArea() {
      const notificationArea = document.createElement('div');
      notificationArea.id = 'notification-area';
      document.body.appendChild(notificationArea);
      return notificationArea;
    }
  });
</script>

<link rel="stylesheet" href="/css/enhanced-chat.css">

<%- include('partials/footer'); %>
