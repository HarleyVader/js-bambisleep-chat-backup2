<!DOCTYPE html>
<html lang="en">
<%- include('partials/head') %>
<title><%= title || 'Chat' %> | BambiSleep</title>

<body>
  <%- include('partials/nav', { path: '/chat' }) %>

<div class="container">
  <div class="row">
    <div class="col-md-12">
      <div class="chat-container">
        <div class="chat-header">
          <h2>BambiSleep Chat</h2>
        </div>
        
        <div class="chat-messages">
          <div id="loading-indicator" class="loading-indicator" style="display: none;">
            <span>Loading older messages...</span>
          </div>
          <ul id="chat-response">
            <% if (chatMessages && chatMessages.length > 0) { %>
              <% chatMessages.forEach(msg => { %>
                <li data-timestamp="<%= msg.timestamp %>">
                  <span class="chat-time"><%= new Date(msg.timestamp).toLocaleTimeString([], {hour12: false}) %></span> -
                  <span class="chat-username"><a href="/profile/<%= msg.username %>" class="username-link"><%= msg.username %></a>:</span>
                  <span class="chat-message"><%= msg.data %></span>
                </li>
              <% }); %>
            <% } else { %>
              <li class="system-message">No messages yet. Be the first to chat!</li>
            <% } %>
          </ul>
        </div>
        
        <div class="chat-controls">
          <div class="font-controls">
            <label>Font Size:</label>
            <button id="font-decrease" class="btn btn-sm">A-</button>
            <span id="font-size-display">16px</span>
            <button id="font-increase" class="btn btn-sm">A+</button>
          </div>
          <div class="online-users">
            <span class="online-label">Online:</span>
            <span id="online-count">0</span>
            <ul id="online-list"></ul>
          </div>
        </div>
        
        <div class="chat-input">
          <form id="chat-form">
            <div class="input-group">
              <input type="text" id="chat-message" class="form-control" placeholder="Type your message..." autocomplete="off">
              <button class="emoji-btn" type="button">😊</button>
              <button class="btn btn-primary send-btn" type="submit">Send</button>
            </div>
            <div class="emoji-picker" id="emoji-picker" style="display: none;"></div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Include Scripts -->
<script src="/socket.io/socket.io.js"></script>
<script src="/js/chat.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize socket
    const socket = io();
    window.socket = socket;
    
    // Chat form submission
    const chatForm = document.getElementById('chat-form');
    const chatInput = document.getElementById('chat-message');
    
    chatForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const message = chatInput.value.trim();
      if (message) {
        socket.emit('chat message', { data: message });
        chatInput.value = '';
      }
    });

    // Font size controls
    let fontSize = parseInt(localStorage.getItem('chatFontSize') || '16');
    const chatResponse = document.getElementById('chat-response');
    const fontSizeDisplay = document.getElementById('font-size-display');
    
    function updateFontSize() {
      chatResponse.style.fontSize = fontSize + 'px';
      fontSizeDisplay.textContent = fontSize + 'px';
      localStorage.setItem('chatFontSize', fontSize);
    }
    
    document.getElementById('font-increase').addEventListener('click', function() {
      fontSize = Math.min(fontSize + 2, 24);
      updateFontSize();
    });
    
    document.getElementById('font-decrease').addEventListener('click', function() {
      fontSize = Math.max(fontSize - 2, 12);
      updateFontSize();
    });
    
    // Apply saved font size
    updateFontSize();

    // Online users functionality
    const onlineCount = document.getElementById('online-count');
    const onlineList = document.getElementById('online-list');
    
    socket.on('online users', function(users) {
      onlineCount.textContent = users.length;
      onlineList.innerHTML = '';
      users.forEach(user => {
        const li = document.createElement('li');
        li.textContent = user;
        li.className = 'online-user';
        onlineList.appendChild(li);
      });
    });

    // Emoji picker functionality
    const emojis = ['😊', '😂', '😍', '😘', '😋', '😎', '😇', '🤗', '🤔', '😱', '😭', '😤', '😡', '🤤', '😵', '🤯', '💕', '💖', '💗', '💯', '🔥', '✨', '💫', '⭐', '🌟'];
    const emojiBtn = document.querySelector('.emoji-btn');
    const emojiPicker = document.getElementById('emoji-picker');
    
    // Create emoji picker
    emojis.forEach(emoji => {
      const span = document.createElement('span');
      span.textContent = emoji;
      span.className = 'emoji-option';
      span.onclick = function() {
        chatInput.value += emoji;
        emojiPicker.style.display = 'none';
        chatInput.focus();
      };
      emojiPicker.appendChild(span);
    });
    
    emojiBtn.addEventListener('click', function(e) {
      e.preventDefault();
      emojiPicker.style.display = emojiPicker.style.display === 'none' ? 'block' : 'none';
    });
    
    // Close emoji picker when clicking outside
    document.addEventListener('click', function(e) {
      if (!emojiBtn.contains(e.target) && !emojiPicker.contains(e.target)) {
        emojiPicker.style.display = 'none';
      }
    });

    // TTS functionality with af_bella voice
    function speakText(text, count = 1) {
      if ('speechSynthesis' in window) {
        let spoken = 0;
        const speakOnce = () => {
          const utterance = new SpeechSynthesisUtterance(text);
          utterance.rate = 0.8;
          utterance.pitch = 1;
          
          // Try to use af_bella voice if available
          const voices = speechSynthesis.getVoices();
          const bellaVoice = voices.find(voice => voice.name.includes('bella') || voice.name.includes('Bella'));
          if (bellaVoice) {
            utterance.voice = bellaVoice;
          }
          
          utterance.onend = () => {
            spoken++;
            if (spoken < count) {
              setTimeout(speakOnce, 500);
            }
          };
          speechSynthesis.speak(utterance);
        };
        speakOnce();
      }
    }

    // Add glow effect to user
    function addGlowEffect() {
      document.body.classList.add('mentioned');
      setTimeout(() => {
        document.body.classList.remove('mentioned');
      }, 3000);
    }

    // Auto-scroll to bottom and maintain unlimited messages with infinite scroll
    let isLoadingMessages = false;
    let hasMoreMessages = true;
    
    function autoScrollToBottom() {
      const chatMessages = document.querySelector('.chat-messages');
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Load older messages for infinite scroll
    async function loadOlderMessages() {
      if (isLoadingMessages || !hasMoreMessages) return;
      
      isLoadingMessages = true;
      const loadingIndicator = document.getElementById('loading-indicator');
      const chatResponse = document.getElementById('chat-response');
      
      // Show loading indicator
      loadingIndicator.style.display = 'block';
      
      // Get timestamp of oldest message by finding the data-timestamp attribute or using a different approach
      let oldestTimestamp = null;
      const messageNodes = chatResponse.querySelectorAll('li');
      
      // We need to reconstruct timestamp from the HTML. Let's add data attributes to messages.
      // For now, let's use a simpler approach - get the oldest from server on first load
      if (messageNodes.length > 0) {
        // Use a more reliable method - we'll store the timestamp when we render messages
        const firstNonSystemMessage = Array.from(messageNodes).find(node => 
          !node.classList.contains('system-message') && 
          !node.classList.contains('countdown-message'));
        
        if (firstNonSystemMessage) {
          // Store timestamp as data attribute when creating messages
          oldestTimestamp = firstNonSystemMessage.dataset.timestamp;
          
          // Fallback: try to reconstruct from time display (assumes today)
          if (!oldestTimestamp) {
            const timeElement = firstNonSystemMessage.querySelector('.chat-time');
            if (timeElement) {
              const timeText = timeElement.textContent;
              const today = new Date();
              const [hours, minutes, seconds] = timeText.split(':');
              const messageDate = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 
                                         parseInt(hours), parseInt(minutes), parseInt(seconds || 0));
              oldestTimestamp = messageDate.toISOString();
            }
          }
        }
      }
      
      if (!oldestTimestamp) {
        loadingIndicator.style.display = 'none';
        isLoadingMessages = false;
        return;
      }
      
      try {
        const response = await fetch(`/api/chat/messages?limit=50&before=${oldestTimestamp}`);
        const data = await response.json();
        
        if (data.messages && data.messages.length > 0) {
          // Store current scroll position
          const chatMessages = document.querySelector('.chat-messages');
          const currentScrollHeight = chatMessages.scrollHeight;
          
          // Prepend messages to the top
          const fragment = document.createDocumentFragment();
          data.messages.forEach(msg => {
            const li = document.createElement('li');
            li.dataset.timestamp = msg.timestamp; // Store timestamp for future pagination
            li.innerHTML = `
              <span class="chat-time">${new Date(msg.timestamp).toLocaleTimeString([], {hour12: false})}</span> -
              <span class="chat-username"><a href="/profile/${msg.username}" class="username-link">${msg.username}</a>:</span>
              <span class="chat-message">${msg.data}</span>
            `;
            fragment.appendChild(li);
          });
          
          chatResponse.insertBefore(fragment, chatResponse.firstChild);
          
          // Maintain scroll position
          const newScrollHeight = chatMessages.scrollHeight;
          chatMessages.scrollTop = newScrollHeight - currentScrollHeight;
          
          hasMoreMessages = data.hasMore;
        } else {
          hasMoreMessages = false;
        }
      } catch (error) {
        console.error('Error loading older messages:', error);
      }
      
      // Hide loading indicator
      loadingIndicator.style.display = 'none';
      isLoadingMessages = false;
    }

    // Show countdown in chat
    function showCountdown(count, trigger) {
      const countdownLi = document.createElement('li');
      countdownLi.className = 'system-message countdown-message';
      countdownLi.innerHTML = `<span class="countdown">Speaking "${trigger}" ${count} times...</span>`;
      document.getElementById('chat-response').appendChild(countdownLi);
      
      // Auto-scroll after adding countdown
      autoScrollToBottom();
      
      let remaining = count;
      const countdownInterval = setInterval(() => {
        remaining--;
        if (remaining > 0) {
          countdownLi.innerHTML = `<span class="countdown">Speaking "${trigger}" ${remaining} more times...</span>`;
        } else {
          countdownLi.innerHTML = `<span class="countdown">Finished speaking "${trigger}"</span>`;
          clearInterval(countdownInterval);
          setTimeout(() => {
            countdownLi.remove();
            autoScrollToBottom();
          }, 2000);
        }
      }, 1000);
    }

    // Handle special chat events
    socket.on('chat mention', function(data) {
      if (data.mentionedUser === '<%= username %>') {
        addGlowEffect();
      }
    });

    socket.on('chat trigger', function(data) {
      speakText(data.trigger);
    });

    socket.on('chat mention trigger', function(data) {
      if (data.mentionedUser === '<%= username %>') {
        addGlowEffect();
        const count = data.count || 1;
        if (count > 1) {
          showCountdown(count, data.trigger);
        }
        speakText(data.trigger, count);
      }
    });

    // Handle regular chat messages
    socket.on('chat message', function(data) {
      const li = document.createElement('li');
      li.dataset.timestamp = data.timestamp; // Store timestamp for pagination
      li.innerHTML = `
        <span class="chat-time">${new Date(data.timestamp).toLocaleTimeString([], {hour12: false})}</span> -
        <span class="chat-username"><a href="/profile/${data.username}" class="username-link">${data.username}</a>:</span>
        <span class="chat-message">${data.data}</span>
      `;
      document.getElementById('chat-response').appendChild(li);
      
      // Auto-scroll to bottom for new messages
      autoScrollToBottom();
    });

    // Infinite scroll functionality
    const chatMessages = document.querySelector('.chat-messages');
    let scrollTimeout;
    
    chatMessages.addEventListener('scroll', function() {
      // Debounce scroll events
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(() => {
        // Check if scrolled to top (within 10px threshold)
        if (chatMessages.scrollTop <= 10 && hasMoreMessages && !isLoadingMessages) {
          loadOlderMessages();
        }
      }, 100);
    });

    // Initial scroll to bottom on page load
    setTimeout(() => {
      autoScrollToBottom();
    }, 100);
  });
</script>

<style>
  .mentioned {
    animation: glow 3s ease-in-out;
  }
  
  @keyframes glow {
    0%, 100% { box-shadow: none; }
    50% { box-shadow: 0 0 20px rgba(255, 105, 180, 0.8); }
  }
  
  .countdown-message {
    font-style: italic;
    color: var(--tertiary-alt);
  }
  
  .countdown {
    font-weight: bold;
  }
  
  .chat-messages {
    height: 450px;
    overflow-y: auto;
    background: rgba(var(--nav-color-rgb), 0.3);
    border-radius: var(--border-radius);
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid var(--border-color);
  }
  
  .chat-messages::-webkit-scrollbar {
    width: 8px;
  }
  
  .chat-messages::-webkit-scrollbar-track {
    background: var(--nav-color);
    border-radius: var(--border-radius);
  }
  
  .chat-messages::-webkit-scrollbar-thumb {
    background: var(--tertiary-color);
    border-radius: var(--border-radius);
  }
  
  .chat-messages::-webkit-scrollbar-thumb:hover {
    background: var(--nav-alt);
  }
  
  .chat-container {
    background: rgba(0, 0, 0, 0.3);
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
  }
  
  .chat-header {
    margin-bottom: 20px;
    text-align: center;
  }
  
  .chat-header h2 {
    color: var(--nav-alt);
    margin: 0;
  }
  
  .chat-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
    padding: 10px;
    background: rgba(var(--nav-color-rgb), 0.4);
    border-radius: var(--border-radius);
    border: 1px solid var(--border-color);
  }
  
  .font-controls {
    display: flex;
    align-items: center;
    gap: 8px;
  }
  
  .font-controls label {
    font-size: 12px;
    color: var(--nav-alt);
    font-weight: bold;
  }
  
  .font-controls button {
    /* Use main button styles from style.css */
    color: var(--secondary-color);
    background-color: var(--button-color);
    text-shadow: var(--tertiary-color) 0.3vw 0.3vw 0.3vw;
    border: var(--secondary-color) outset 0.3vw;
    padding: 0.5rem 1rem;
    font-size: 0.8rem;
    border-radius: 0.6vw;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
    display: inline-block;
    box-sizing: border-box;
    font-family: "Audiowide", cursive;
  }
  
  .font-controls button:hover {
    color: var(--button-color);
    background-color: var(--secondary-color);
    text-shadow: var(--nav-color) 0.3vw 0.3vw 0.3vw;
    border: var(--button-color) outset 0.3vw;
    box-shadow: 0 0 15px var(--button-color), 0 0 25px rgba(var(--button-color-rgb), 0.5);
  }
  
  .font-controls button:active {
    background-color: var(--tertiary-alt);
    color: var(--nav-alt);
    border-color: var(--primary-alt);
    transform: translateY(0);
  }
  
  #font-size-display {
    font-size: 12px;
    color: var(--nav-alt);
    background: rgba(var(--nav-color-rgb), 0.7);
    padding: 2px 6px;
    border-radius: var(--border-radius);
    min-width: 40px;
    text-align: center;
    border: 1px solid var(--border-color);
  }
  
  .online-users {
    display: flex;
    align-items: center;
    gap: 10px;
    color: var(--nav-alt);
    font-size: 14px;
  }
  
  .online-label {
    font-weight: bold;
  }
  
  #online-count {
    background: var(--tertiary-color);
    color: var(--button-alt);
    padding: 2px 6px;
    border-radius: 10px;
    font-size: 12px;
  }
  
  #online-list {
    display: flex;
    flex-wrap: wrap;
    gap: 5px;
    margin: 0;
    padding: 0;
    list-style: none;
    max-width: 200px;
  }
  
  .online-user {
    background: rgba(var(--nav-color-rgb), 0.7);
    color: var(--nav-alt);
    padding: 2px 6px;
    border-radius: var(--border-radius);
    font-size: 11px;
    border: 1px solid var(--border-color);
  }
  
  .input-group {
    display: flex;
    align-items: center;
    gap: 10px;
    flex-wrap: nowrap;
  }
  
  .input-group input {
    flex: 1;
    padding: 10px;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    background: var(--nav-color);
    color: var(--primary-alt);
    font-family: "Audiowide", cursive;
    transition: all 0.3s ease;
  }
  
  .input-group input:focus {
    border-color: var(--tertiary-color);
    box-shadow: 0 0 5px rgba(var(--tertiary-color-rgb), 0.5);
    outline: none;
  }
  
  .emoji-btn {
    /* Use main button styles from style.css */
    color: var(--secondary-color);
    background-color: var(--button-color);
    text-shadow: var(--tertiary-color) 0.3vw 0.3vw 0.3vw;
    border: var(--secondary-color) outset 0.3vw;
    padding: 0.5rem;
    font-size: 1rem;
    border-radius: 0.6vw;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
    display: inline-block;
    box-sizing: border-box;
    flex-shrink: 0;
  }
  
  .emoji-btn:hover {
    color: var(--button-color);
    background-color: var(--secondary-color);
    text-shadow: var(--nav-color) 0.3vw 0.3vw 0.3vw;
    border: var(--button-color) outset 0.3vw;
    box-shadow: 0 0 15px var(--button-color), 0 0 25px rgba(var(--button-color-rgb), 0.5);
  }
  
  .emoji-btn:active {
    background-color: var(--tertiary-alt);
    color: var(--nav-alt);
    border-color: var(--primary-alt);
    transform: translateY(0);
  }
  
  .chat-input .send-btn {
    /* Use main button styles from style.css */
    color: var(--secondary-color);
    background-color: var(--button-color);
    text-shadow: var(--tertiary-color) 0.3vw 0.3vw 0.3vw;
    border: var(--secondary-color) outset 0.3vw;
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    border-radius: 0.6vw;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
    display: inline-block;
    box-sizing: border-box;
    font-family: "Audiowide", cursive;
    font-weight: bold;
    flex-shrink: 0;
  }
  
  .chat-input .send-btn:hover {
    color: var(--button-color);
    background-color: var(--secondary-color);
    text-shadow: var(--nav-color) 0.3vw 0.3vw 0.3vw;
    border: var(--button-color) outset 0.3vw;
    box-shadow: 0 0 15px var(--button-color), 0 0 25px rgba(var(--button-color-rgb), 0.5);
  }
  
  .chat-input .send-btn:active {
    background-color: var(--tertiary-alt);
    color: var(--nav-alt);
    border-color: var(--primary-alt);
    transform: translateY(0);
  }
  
  .emoji-picker {
    position: absolute;
    bottom: 100%;
    right: 0;
    background: var(--nav-color);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-lg);
    padding: 10px;
    display: flex;
    flex-wrap: wrap;
    gap: 5px;
    max-width: 200px;
    z-index: 1000;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
  }
  
  .emoji-option {
    cursor: pointer;
    padding: 5px;
    border-radius: var(--border-radius);
    transition: background 0.3s;
  }
  
  .emoji-option:hover {
    background: rgba(var(--tertiary-color-rgb), 0.3);
  }
  
  .chat-input {
    position: relative;
    margin-top: 20px;
  }
  
  .system-message {
    color: var(--tertiary-alt);
    font-style: italic;
  }
  
  .unsafe-url-warning {
    color: var(--error);
    font-weight: bold;
  }
  
  .loading-indicator {
    text-align: center;
    padding: 10px;
    color: var(--tertiary-alt);
    font-style: italic;
    background: rgba(var(--nav-color-rgb), 0.5);
    border-radius: var(--border-radius);
    margin-bottom: 10px;
    border: 1px solid var(--border-color);
    animation: pulse 1.5s ease-in-out infinite;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 0.6; }
    50% { opacity: 1; }
  }
</style>

<link rel="stylesheet" href="/css/chat.css">

<%- include('partials/footer'); %>
